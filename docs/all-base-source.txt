File Contents:

File: App.tsx
---
import { RouterProvider } from 'react-router-dom';
import { router } from './router';

function App() {
  return <RouterProvider router={router} />;
}

export default App;
---

File: index.css
---
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark; /* Allow system to choose light/dark */
  color: rgba(0, 0, 0, 0.88); /* Default text color for light theme */
  background-color: #f0f2f5; /* Default background color for light theme */

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  margin: 0;
}

#root {
  width: 100vw;
  height: 100vh;
}

/* Custom scrollbar for webkit browsers */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1; /* Light theme scrollbar track */
}

::-webkit-scrollbar-thumb {
  background: #c1c1c1; /* Light theme scrollbar thumb */
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8; /* Light theme scrollbar thumb hover */
}

/* Dark theme specific scrollbar styles (retained for system dark mode preference) */
@media (prefers-color-scheme: dark) {
  :root {
    color: rgba(255, 255, 255, 0.87);
    background-color: #242424;
  }
  ::-webkit-scrollbar-track {
    background: #2c2c2c;
  }

  ::-webkit-scrollbar-thumb {
    background: #555;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: #777;
  }
}
---

File: main.tsx
---
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { ConfigProvider, theme } from 'antd';
import zhCN from 'antd/locale/zh_CN';
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <ConfigProvider
      locale={zhCN}
      theme={{
        algorithm: theme.defaultAlgorithm, // Changed from darkAlgorithm to defaultAlgorithm for light theme
        token: {
          colorPrimary: '#1890ff', // Using a standard Ant Design blue for primary color
        },
      }}
    >
      <App />
    </ConfigProvider>
  </StrictMode>,
)
---

File: components\PushCaseFlow.tsx
---
import { useState, useEffect } from 'react';
import { Modal, Button, Steps, Result, Descriptions, Spin, Alert } from 'antd';
import { CheckCircleOutlined, SyncOutlined } from '@ant-design/icons';
import type { UnknownCase } from '../data/unknownCases';

interface PushCaseFlowProps {
    visible: boolean;
    onClose: () => void;
    caseData: UnknownCase | null;
}

const PushCaseFlow = ({ visible, onClose, caseData }: PushCaseFlowProps) => {
    const [step, setStep] = useState(0); // 0: confirm, 1: progress, 2: result
    const [progress, setProgress] = useState(0);
    const [progressStatus, setProgressStatus] = useState<any>('process');
    const [newCaseNo, setNewCaseNo] = useState('');

    useEffect(() => {
        if (step === 1) {
            const timer = setInterval(() => {
                setProgress(prev => {
                    if (prev >= 100) {
                        clearInterval(timer);
                        setStep(2);
                        return 100;
                    }
                    return prev + 20;
                });
            }, 500);

            // Simulate generating a new case number
            setNewCaseNo(`CAS-2024-${Math.floor(Math.random() * 1000)}`);

            return () => clearInterval(timer);
        }
    }, [step]);
    
    const handlePush = () => {
        setStep(1);
    };

    const handleClose = () => {
        setStep(0);
        setProgress(0);
        setProgressStatus('process');
        onClose();
    };

    const renderConfirmModal = () => (
        <Modal
            title="推送病例至个案管理"
            open={visible}
            onCancel={handleClose}
            footer={[
                <Button key="back" onClick={handleClose}>取消</Button>,
                <Button key="submit" type="primary" onClick={handlePush}>确认推送</Button>,
            ]}
            width={600}
        >
            <p>确认将以下病例推送至个案管理系统？</p>
            <Descriptions bordered column={1} size="small">
                <Descriptions.Item label="病例编号">{caseData?.caseNo}</Descriptions.Item>
                <Descriptions.Item label="患者姓名">{caseData?.patientName}</Descriptions.Item>
                <Descriptions.Item label="确诊疾病">{caseData?.confirmedDisease}</Descriptions.Item>
            </Descriptions>
            <Alert
                style={{ marginTop: 16 }}
                message="推送后将执行以下操作:"
                description={
                    <ul>
                        <li>自动创建个案记录</li>
                        <li>复制检测记录至个案</li>
                        <li>推送至应急指挥系统</li>
                        <li>更新不明原因病例状态为"已推送"</li>
                    </ul>
                }
                type="info"
            />
            <Alert
                style={{ marginTop: 16 }}
                message="注意: 推送后将无法撤销，请确认信息无误。"
                type="warning"
                showIcon
            />
        </Modal>
    );

    const renderProgressModal = () => (
        <Modal
            title="正在推送病例..."
            open={visible}
            closable={false}
            footer={null}
        >
            <Steps direction="vertical" current={Math.floor(progress / 25)} status={progressStatus}>
                <Steps.Step title="数据校验" icon={progress >= 0 ? <CheckCircleOutlined /> : <Spin />} />
                <Steps.Step title="创建个案记录" icon={progress >= 25 ? <CheckCircleOutlined /> : <Spin />} description={progress >= 25 ? `新个案编号: ${newCaseNo}` : ''}/>
                <Steps.Step title="复制检测记录" icon={progress >= 50 ? <CheckCircleOutlined /> : <Spin />} />
                <Steps.Step title="推送至应急指挥系统" icon={progress >= 75 ? <SyncOutlined spin /> : <Spin />} />
                <Steps.Step title="更新病例状态" icon={progress >= 100 ? <CheckCircleOutlined /> : <Spin />} />
            </Steps>
        </Modal>
    );
    
    const renderResultModal = () => (
        <Modal
            title="推送完成"
            open={visible}
            onCancel={handleClose}
            footer={[
                <Button key="viewCase" type="primary" onClick={handleClose}>查看个案详情</Button>,
                <Button key="back" onClick={handleClose}>返回病例列表</Button>,
            ]}
        >
            <Result
                status="success"
                title="病例推送成功！"
                subTitle={`已成功创建个案记录 ${newCaseNo}。`}
            />
        </Modal>
    );

    if (!visible) return null;

    if (step === 1) return renderProgressModal();
    if (step === 2) return renderResultModal();
    return renderConfirmModal();
};

export default PushCaseFlow;
---

File: components\TrajectoryMap.tsx
---
import { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';
import type { TrackingRecord } from '../data/trackingRecords'; // Changed to import type

// Fix for default marker icon issue with webpack
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});


interface TrajectoryMapProps {
    records: TrackingRecord[];
}

const TrajectoryMap = ({ records }: TrajectoryMapProps) => {
    if (records.length === 0) {
        return <div>无轨迹数据可供显示</div>;
    }

    const positions = records.map(r => [r.lat, r.lng] as [number, number]);
    const center = positions[0];

    return (
        <MapContainer center={center} zoom={13} style={{ height: '400px', width: '100%' }}>
            <TileLayer
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            />
            <Polyline pathOptions={{ color: 'blue' }} positions={positions} />
            {records.map(record => (
                <Marker key={record.id} position={[record.lat, record.lng]}>
                    <Popup>
                        <strong>{record.location}</strong><br />
                        {record.date} | {record.type}<br />
                        {record.description}
                    </Popup>
                </Marker>
            ))}
        </MapContainer>
    );
};

export default TrajectoryMap;
---

File: components\forms\DiseaseCodeForm.tsx
---
import { Form, Input, Select, Radio, Row, Col, Card, Typography, Checkbox, Switch } from 'antd';
import type { FormInstance } from 'antd';
import type { DiseaseCodeFormData } from '../../types/forms';
import { pathogens } from '../../data/pathogens'; // Assuming pathogens list for multi-select

const { Title } = Typography;
const { Option } = Select;

interface DiseaseCodeFormProps {
    form: FormInstance<DiseaseCodeFormData>;
    initialValues?: DiseaseCodeFormData;
}

const DiseaseCodeForm = ({ form, initialValues }: DiseaseCodeFormProps) => {
    return (
        <Card>
            <Title level={4}>疾病编码</Title>
            <Form
                form={form}
                layout="vertical"
                initialValues={{ isQuarantine: false, isActive: true, ...initialValues }}
            >
                <Row gutter={16}>
                    <Col span={12}>
                        <Form.Item
                            label="疾病编码"
                            name="diseaseCode"
                            rules={[{ required: true, message: '请输入疾病编码' }, { min: 2, max: 200, message: '疾病编码长度2-200字' }]}
                        >
                            <Input placeholder="请输入疾病编码" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="疾病名称"
                            name="diseaseName"
                            rules={[{ required: true, message: '请输入疾病名称', min: 2, max: 200 }]}
                        >
                            <Input placeholder="请输入疾病名称" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="疾病类别"
                            name="diseaseCategory"
                            rules={[{ required: true, message: '请选择疾病类别' }]}
                        >
                            <Select placeholder="请选择">
                                <Option value="甲类">甲类</Option>
                                <Option value="乙类">乙类</Option>
                                <Option value="丙类">丙类</Option>
                                <Option value="其他">其他</Option>
                            </Select>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="ICD编码"
                            name="icdCode"
                            rules={[{ pattern: /^[A-Z]\d{2}(\.\d)?$/, message: '请输入正确的ICD编码格式 (如 A00.1)' }]}
                        >
                            <Input placeholder="请输入ICD-10编码" />
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="疾病描述"
                            name="description"
                            rules={[{ max: 1000, message: '疾病描述不能超过1000字' }]}
                        >
                            <Input.TextArea rows={2} placeholder="请输入疾病描述" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="风险等级"
                            name="riskLevel"
                            rules={[{ required: true, message: '请选择风险等级' }]}
                        >
                            <Radio.Group>
                                <Radio value="高">高</Radio>
                                <Radio value="中">中</Radio>
                                <Radio value="低">低</Radio>
                            </Radio.Group>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="是否检疫传染病"
                            name="isQuarantine"
                            valuePropName="checked"
                        >
                            <Checkbox>是</Checkbox>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="是否启用"
                            name="isActive"
                            valuePropName="checked"
                        >
                            <Switch checkedChildren="启用" unCheckedChildren="停用" />
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="关联病原体"
                            name="relatedPathogens"
                        >
                            <Select mode="multiple" placeholder="请选择关联病原体">
                                {pathogens.map(p => (
                                    <Option key={p.id} value={p.id}>
                                        {p.name} ({p.scientificName})
                                    </Option>
                                ))}
                            </Select>
                        </Form.Item>
                    </Col>
                </Row>
            </Form>
        </Card>
    );
};

export default DiseaseCodeForm;
---

File: components\forms\FollowUpForm.tsx
---
import { Form, Input, Select, DatePicker, Radio, Row, Col, Card, Typography } from 'antd';
import type { FormInstance } from 'antd';
import moment from 'moment';
import type { FollowUpFormData } from '../../types/forms';

const { Title } = Typography;
const { Option } = Select;

interface FollowUpFormProps {
    form: FormInstance<FollowUpFormData>;
    initialValues?: FollowUpFormData;
    parentType: 'case' | 'unknownCase'; // To distinguish parent record
    parentId: string; // The ID of the parent case or unknown case
}

const FollowUpForm = ({ form, initialValues, parentType, parentId }: FollowUpFormProps) => {
    return (
        <Card>
            <Title level={4}>随访记录</Title>
            <Form
                form={form}
                layout="vertical"
                initialValues={{ ...initialValues, followUpDate: initialValues?.followUpDate || moment() }}
            >
                {/* Hidden fields for parent association */}
                <Form.Item name="caseId" hidden initialValue={parentType === 'case' ? parentId : undefined} />
                <Form.Item name="unknownCaseId" hidden initialValue={parentType === 'unknownCase' ? parentId : undefined} />

                <Row gutter={16}>
                    <Col span={12}>
                        <Form.Item
                            label="随访日期"
                            name="followUpDate"
                            rules={[{ required: true, message: '请选择随访日期' }]}
                        >
                            <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="随访方式"
                            name="followUpMethod"
                            rules={[{ required: true, message: '请选择随访方式' }]}
                        >
                            <Radio.Group>
                                <Radio value="电话随访">电话随访</Radio>
                                <Radio value="现场随访">现场随访</Radio>
                                <Radio value="线上随访">线上随访</Radio>
                            </Radio.Group>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="随访人员"
                            name="followUpUserId"
                            initialValue="当前用户" // Mock current user
                        >
                            <Input readOnly />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="健康状态"
                            name="healthStatus"
                            rules={[{ required: true, message: '请选择健康状态' }]}
                        >
                            <Select placeholder="请选择">
                                <Option value="好转">好转</Option>
                                <Option value="稳定">稳定</Option>
                                <Option value="异常">异常</Option>
                                <Option value="恶化">恶化</Option>
                            </Select>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="体温"
                            name="temperature"
                            rules={[
                                { type: 'number', min: 35.0, max: 42.0, transform: (value) => Number(value), message: '体温范围35.0-42.0°C' }
                            ]}
                        >
                            <Input suffix="°C" placeholder="请输入体温" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="治疗依从性"
                            name="treatmentCompliance"
                            rules={[{ required: true, message: '请选择治疗依从性' }]}
                        >
                            <Radio.Group>
                                <Radio value="良好">良好</Radio>
                                <Radio value="一般">一般</Radio>
                                <Radio value="差">差</Radio>
                            </Radio.Group>
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="症状描述"
                            name="symptoms"
                            rules={[{ max: 500, message: '症状描述不能超过500字' }]}
                        >
                            <Input.TextArea rows={2} placeholder="请输入症状描述" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="下次随访日期"
                            name="nextFollowUpDate"
                            rules={[
                                ({ getFieldValue }) => ({
                                    validator(_, value) {
                                        const followUpDate = getFieldValue('followUpDate');
                                        if (!value || !followUpDate || value.isAfter(followUpDate, 'day')) {
                                            return Promise.resolve();
                                        }
                                        return Promise.reject(new Error('下次随访日期必须晚于随访日期!'));
                                    },
                                }),
                            ]}
                        >
                            <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" />
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="备注"
                            name="remarks"
                            rules={[{ max: 500, message: '备注不能超过500字' }]}
                        >
                            <Input.TextArea rows={2} placeholder="请输入备注" />
                        </Form.Item>
                    </Col>
                </Row>
            </Form>
        </Card>
    );
};

export default FollowUpForm;
---

File: components\forms\PathogenForm.tsx
---
import { Form, Input, Select, Radio, Row, Col, Card, Typography, Switch } from 'antd';
import type { FormInstance } from 'antd';
import type { PathogenFormData } from '../../types/forms';

const { Title } = Typography;
const { Option } = Select;

interface PathogenFormProps {
    form: FormInstance<PathogenFormData>;
    initialValues?: PathogenFormData;
}

const PathogenForm = ({ form, initialValues }: PathogenFormProps) => {
    return (
        <Card>
            <Title level={4}>病原体信息</Title>
            <Form
                form={form}
                layout="vertical"
                initialValues={{ isActive: true, ...initialValues }}
            >
                <Row gutter={16}>
                    <Col span={12}>
                        <Form.Item
                            label="病原体编码"
                            name="pathogenCode"
                            rules={[{ required: true, message: '请输入病原体编码' }, { min: 2, max: 200, message: '病原体编码长度2-200字' }]}
                        >
                            <Input placeholder="请输入病原体编码" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="病原体名称"
                            name="pathogenName"
                            rules={[{ required: true, message: '请输入病原体名称', min: 2, max: 200 }]}
                        >
                            <Input placeholder="请输入病原体名称" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="病原体类型"
                            name="pathogenType"
                            rules={[{ required: true, message: '请选择病原体类型' }]}
                        >
                            <Select placeholder="请选择">
                                <Option value="病毒">病毒</Option>
                                <Option value="细菌">细菌</Option>
                                <Option value="真菌">真菌</Option>
                                <Option value="寄生虫">寄生虫</Option>
                                <Option value="其他">其他</Option>
                            </Select>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="学名"
                            name="scientificName"
                            rules={[{ max: 200, message: '学名不能超过200字' }]}
                        >
                            <Input placeholder="请输入学名" />
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="相关疾病"
                            name="associatedDiseases"
                            rules={[{ max: 1000, message: '相关疾病描述不能超过1000字' }]}
                        >
                            <Input.TextArea rows={2} placeholder="请输入相关疾病（如：霍乱、鼠疫）" />
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="病原体描述"
                            name="description"
                            rules={[{ max: 1000, message: '病原体描述不能超过1000字' }]}
                        >
                            <Input.TextArea rows={2} placeholder="请输入病原体描述" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="生物安全等级"
                            name="biosafettyLevel"
                            rules={[{ required: true, message: '请选择生物安全等级' }]}
                        >
                            <Select placeholder="请选择">
                                <Option value="BSL-1">BSL-1</Option>
                                <Option value="BSL-2">BSL-2</Option>
                                <Option value="BSL-3">BSL-3</Option>
                                <Option value="BSL-4">BSL-4</Option>
                            </Select>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="是否启用"
                            name="isActive"
                            valuePropName="checked"
                        >
                            <Switch checkedChildren="启用" unCheckedChildren="停用" />
                        </Form.Item>
                    </Col>
                </Row>
            </Form>
        </Card>
    );
};

export default PathogenForm;
---

File: components\forms\TestRecordForm.tsx
---
import { Form, Input, Select, DatePicker, Radio, Row, Col, Card, Typography, Upload, message, Button } from 'antd';
import { UploadOutlined } from '@ant-design/icons';
import type { FormInstance } from 'antd';
import moment from 'moment';
import type { TestRecordFormData } from '../../types/forms';

const { Title } = Typography;
const { Option } = Select;

interface TestRecordFormProps {
    form: FormInstance<TestRecordFormData>;
    initialValues?: TestRecordFormData;
    parentType: 'case' | 'unknownCase'; // To distinguish parent record
    parentId: string; // The ID of the parent case or unknown case
}

const TestRecordForm = ({ form, initialValues, parentType, parentId }: TestRecordFormProps) => {
    const testResult = Form.useWatch('testResult', form);

    const uploadProps = {
        name: 'file',
        action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76', // Mock upload URL
        headers: {
            authorization: 'authorization-text',
        },
        onChange(info: any) {
            if (info.file.status !== 'uploading') {
                console.log(info.file, info.fileList);
            }
            if (info.file.status === 'done') {
                message.success(`${info.file.name} 文件上传成功`);
            } else if (info.file.status === 'error') {
                message.error(`${info.file.name} 文件上传失败.`);
            }
        },
    };

    return (
        <Card>
            <Title level={4}>检测记录</Title>
            <Form
                form={form}
                layout="vertical"
                initialValues={{ ...initialValues, sampleCollectionDate: initialValues?.sampleCollectionDate || moment() }}
            >
                {/* Hidden fields for parent association */}
                <Form.Item name="caseId" hidden initialValue={parentType === 'case' ? parentId : undefined} />
                <Form.Item name="unknownCaseId" hidden initialValue={parentType === 'unknownCase' ? parentId : undefined} />
                <Form.Item name="testNo" hidden initialValue={initialValues?.testNo || `TEST-${Date.now().toString().slice(-6)}`} /> {/* Mock auto-generated */}


                <Row gutter={16}>
                    <Col span={12}>
                        <Form.Item
                            label="样本采集时间"
                            name="sampleCollectionDate"
                            rules={[{ required: true, message: '请选择样本采集时间' }]}
                        >
                            <DatePicker showTime style={{ width: '100%' }} format="YYYY-MM-DD HH:mm" disabledDate={(current) => current && current > moment().endOf('day')} />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="样本类型"
                            name="sampleType"
                            rules={[{ required: true, message: '请选择样本类型' }]}
                        >
                            <Select placeholder="请选择">
                                <Option value="咽拭子">咽拭子</Option>
                                <Option value="血液">血液</Option>
                                <Option value="粪便">粪便</Option>
                                <Option value="尿液">尿液</Option>
                                <Option value="其他">其他</Option>
                            </Select>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="检测类型"
                            name="testType"
                            rules={[{ required: true, message: '请选择检测类型' }]}
                        >
                            <Select placeholder="请选择">
                                <Option value="核酸检测">核酸检测</Option>
                                <Option value="抗体检测">抗体检测</Option>
                                <Option value="培养">培养</Option>
                                <Option value="影像学">影像学</Option>
                                <Option value="其他">其他</Option>
                            </Select>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="检测机构"
                            name="testOrgName"
                            rules={[{ required: true, message: '请输入检测机构', min: 2, max: 200 }]}
                        >
                            <Input placeholder="请输入检测机构" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="检测日期"
                            name="testDate"
                            rules={[
                                ({ getFieldValue }) => ({
                                    validator(_, value) {
                                        const sampleCollectionDate = getFieldValue('sampleCollectionDate');
                                        if (!value || !sampleCollectionDate || value.isSameOrAfter(sampleCollectionDate, 'day')) {
                                            return Promise.resolve();
                                        }
                                        return Promise.reject(new Error('检测日期不能早于样本采集时间!'));
                                    },
                                }),
                            ]}
                        >
                            <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="检测结果"
                            name="testResult"
                        >
                            <Radio.Group>
                                <Radio value="阳性">阳性</Radio>
                                <Radio value="阴性">阴性</Radio>
                                <Radio value="待定">待定</Radio>
                                <Radio value="不确定">不确定</Radio>
                            </Radio.Group>
                        </Form.Item>
                    </Col>
                    {testResult === '阳性' && (
                        <Col span={24}>
                            <Form.Item
                                label="检出病原体"
                                name="pathogenDetected"
                                rules={[{ max: 200, message: '病原体名称不能超过200字' }]}
                            >
                                <Input placeholder="请输入检出的病原体" />
                            </Form.Item>
                        </Col>
                    )}
                    <Col span={24}>
                        <Form.Item
                            label="结果详情"
                            name="resultDetails"
                            rules={[{ max: 1000, message: '结果详情不能超过1000字' }]}
                        >
                            <Input.TextArea rows={2} placeholder="请输入结果详情" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="检测状态"
                            name="testStatus"
                            rules={[{ required: true, message: '请选择检测状态' }]}
                        >
                            <Radio.Group>
                                <Radio value="待确认">待确认</Radio>
                                <Radio value="已确认">已确认</Radio>
                            </Radio.Group>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item label="检测报告文件" name="labReportFile">
                            <Upload {...uploadProps}>
                                <Button icon={<UploadOutlined />}>上传文件</Button>
                            </Upload>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="创建人"
                            name="createdBy"
                            initialValue="当前用户" // Mock current user
                        >
                            <Input readOnly />
                        </Form.Item>
                    </Col>
                </Row>
            </Form>
        </Card>
    );
};

export default TestRecordForm;
---

File: components\forms\TrackingRecordForm.tsx
---
import { Form, Input, Select, DatePicker, Radio, Row, Col, Card, Typography } from 'antd';
import type { FormInstance } from 'antd';
import moment from 'moment';
import type { TrackingRecordFormData } from '../../types/forms';

const { Title } = Typography;
const { Option } = Select;

interface TrackingRecordFormProps {
    form: FormInstance<TrackingRecordFormData>;
    initialValues?: TrackingRecordFormData;
    caseId: string; // The ID of the parent case
}

const TrackingRecordForm = ({ form, initialValues, caseId }: TrackingRecordFormProps) => {
    const trackingType = Form.useWatch('trackingType', form);

    return (
        <Card>
            <Title level={4}>追踪记录</Title>
            <Form
                form={form}
                layout="vertical"
                initialValues={{ ...initialValues, trackingDate: initialValues?.trackingDate || moment(), startDate: initialValues?.startDate || moment(), endDate: initialValues?.endDate || moment() }}
            >
                {/* Hidden field for case association */}
                <Form.Item name="caseId" hidden initialValue={caseId} />

                <Row gutter={16}>
                    <Col span={12}>
                        <Form.Item
                            label="追踪日期"
                            name="trackingDate"
                            rules={[{ required: true, message: '请选择追踪日期' }]}
                        >
                            <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="追踪类型"
                            name="trackingType"
                            rules={[{ required: true, message: '请选择追踪类型' }]}
                        >
                            <Radio.Group>
                                <Radio value="旅居史">旅居史</Radio>
                                <Radio value="接触史">接触史</Radio>
                                <Radio value="物品暴露史">物品暴露史</Radio>
                                <Radio value="场所暴露史">场所暴露史</Radio>
                            </Radio.Group>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="开始日期"
                            name="startDate"
                            rules={[{ required: true, message: '请选择开始日期' }]}
                        >
                            <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="结束日期"
                            name="endDate"
                            rules={[
                                { required: true, message: '请选择结束日期' },
                                ({ getFieldValue }) => ({
                                    validator(_, value) {
                                        const startDate = getFieldValue('startDate');
                                        if (!value || !startDate || value.isSameOrAfter(startDate, 'day')) {
                                            return Promise.resolve();
                                        }
                                        return Promise.reject(new Error('结束日期不能早于开始日期!'));
                                    },
                                }),
                            ]}
                        >
                            <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="关联地区"
                            name="regionId"
                            rules={[{ required: true, message: '请选择关联地区' }]}
                        >
                            {/* In a real application, this would be a Cascader for 省/市/县 */}
                            <Select placeholder="请选择地区 (模拟)" >
                                <Option value="region1">北京市</Option>
                                <Option value="region2">上海市</Option>
                                <Option value="region3">广州市</Option>
                            </Select>
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="地点描述"
                            name="locationDescription"
                            rules={[{ required: true, message: '请输入地点描述', min: 10, max: 500 }]}
                        >
                            <Input.TextArea rows={2} placeholder="请输入地点描述" />
                        </Form.Item>
                    </Col>
                    {/* Map picker for longitude/latitude would go here */}
                    {trackingType === '接触史' && (
                        <Col span={24}>
                            <Form.Item
                                label="接触人员信息"
                                name="contactPersons"
                                rules={[{ max: 1000, message: '接触人员信息不能超过1000字' }]}
                            >
                                <Input.TextArea rows={2} placeholder="请输入接触人员信息" />
                            </Form.Item>
                        </Col>
                    )}
                    <Col span={24}>
                        <Form.Item
                            label="暴露详情"
                            name="exposureDetails"
                            rules={[{ required: true, message: '请输入暴露详情', min: 10, max: 1000 }]}
                        >
                            <Input.TextArea rows={3} placeholder="请输入暴露详情" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="风险评估"
                            name="riskAssessment"
                            rules={[{ required: true, message: '请选择风险评估' }]}
                        >
                            <Radio.Group>
                                <Radio value="高风险">高风险</Radio>
                                <Radio value="中风险">中风险</Radio>
                                <Radio value="低风险">低风险</Radio>
                            </Radio.Group>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="创建人"
                            name="createdBy"
                            initialValue="当前用户" // Mock current user
                        >
                            <Input readOnly />
                        </Form.Item>
                    </Col>
                </Row>
            </Form>
        </Card>
    );
};

export default TrackingRecordForm;
---

File: components\forms\TreatmentForm.tsx
---
import { Form, Input, Select, DatePicker, Radio, Row, Col, Card, Typography } from 'antd';
import type { FormInstance } from 'antd';
import moment from 'moment';
import type { TreatmentFormData } from '../../types/forms';

const { Title } = Typography;
const { Option } = Select;

interface TreatmentFormProps {
    form: FormInstance<TreatmentFormData>;
    initialValues?: TreatmentFormData;
    caseId: string; // The ID of the parent case
}

const TreatmentForm = ({ form, initialValues, caseId }: TreatmentFormProps) => {
    const treatmentType = Form.useWatch('treatmentType', form);

    return (
        <Card>
            <Title level={4}>治疗记录</Title>
            <Form
                form={form}
                layout="vertical"
                initialValues={{ ...initialValues, treatmentDate: initialValues?.treatmentDate || moment() }}
            >
                {/* Hidden field for case association */}
                <Form.Item name="caseId" hidden initialValue={caseId} />

                <Row gutter={16}>
                    <Col span={12}>
                        <Form.Item
                            label="治疗日期"
                            name="treatmentDate"
                            rules={[{ required: true, message: '请选择治疗日期' }]}
                        >
                            <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="治疗类型"
                            name="treatmentType"
                            rules={[{ required: true, message: '请选择治疗类型' }]}
                        >
                            <Radio.Group>
                                <Radio value="门诊">门诊</Radio>
                                <Radio value="住院">住院</Radio>
                                <Radio value="居家隔离">居家隔离</Radio>
                            </Radio.Group>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="医院名称"
                            name="hospitalName"
                            rules={[{ required: true, message: '请输入医院名称', min: 2, max: 200 }]}
                        >
                            <Input placeholder="请输入医院名称" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="科室名称"
                            name="departmentName"
                            rules={[{ min: 2, max: 100, message: '科室名称2-100字' }]}
                        >
                            <Input placeholder="请输入科室名称" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="医生姓名"
                            name="doctorName"
                            rules={[{ min: 2, max: 50, message: '医生姓名2-50字' }]}
                        >
                            <Input placeholder="请输入医生姓名" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="治疗转归"
                            name="treatmentOutcome"
                        >
                            <Select placeholder="请选择">
                                <Option value="治愈">治愈</Option>
                                <Option value="好转">好转</Option>
                                <Option value="无效">无效</Option>
                                <Option value="死亡">死亡</Option>
                                <Option value="转院">转院</Option>
                            </Select>
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="诊断"
                            name="diagnosis"
                            rules={[{ required: true, message: '请输入诊断', min: 10, max: 500 }]}
                        >
                            <Input.TextArea rows={2} placeholder="请输入诊断" />
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="治疗方案"
                            name="treatmentPlan"
                            rules={[{ required: true, message: '请输入治疗方案', min: 10, max: 1000 }]}
                        >
                            <Input.TextArea rows={3} placeholder="请输入治疗方案" />
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="用药情况"
                            name="medications"
                            rules={[{ max: 1000, message: '用药情况不能超过1000字' }]}
                        >
                            <Input.TextArea rows={3} placeholder="请输入用药情况" />
                        </Form.Item>
                    </Col>
                    {treatmentType === '住院' && (
                        <Col span={12}>
                            <Form.Item
                                label="出院日期"
                                name="dischargeDate"
                                rules={[
                                    ({ getFieldValue }) => ({
                                        validator(_, value) {
                                            const treatmentDate = getFieldValue('treatmentDate');
                                            if (!value || !treatmentDate || value.isSameOrAfter(treatmentDate, 'day')) {
                                                return Promise.resolve();
                                            }
                                            return Promise.reject(new Error('出院日期不能早于治疗日期!'));
                                        },
                                    }),
                                ]}
                            >
                                <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" />
                            </Form.Item>
                        </Col>
                    )}
                    <Col span={12}>
                        <Form.Item
                            label="创建人"
                            name="createdBy"
                            initialValue="当前用户" // Mock current user
                        >
                            <Input readOnly />
                        </Form.Item>
                    </Col>
                </Row>
            </Form>
        </Card>
    );
};

export default TreatmentForm;
---

File: components\forms\UnknownCaseForm.tsx
---
import { Form, Input, Select, DatePicker, Radio, Row, Col, Card, Typography } from 'antd';
import type { FormInstance } from 'antd';
import moment from 'moment';
import type { UnknownCaseFormData } from '../../types/forms';

const { Title } = Typography;
const { Option } = Select;

interface UnknownCaseFormProps {
    form: FormInstance<UnknownCaseFormData>;
    initialValues?: UnknownCaseFormData;
}

const UnknownCaseForm = ({ form, initialValues }: UnknownCaseFormProps) => {
    return (
        <Card>
            <Title level={4}>不明原因病例信息</Title>
            <Form
                form={form}
                layout="vertical"
                initialValues={{ ...initialValues, reportDate: initialValues?.reportDate || moment(), symptomOnsetDate: initialValues?.symptomOnsetDate || moment() }}
            >
                <Row gutter={16}>
                    <Col span={12}>
                        <Form.Item
                            label="患者姓名"
                            name="patientName"
                            rules={[{ required: true, message: '请输入患者姓名', min: 2, max: 50 }]}
                        >
                            <Input placeholder="请输入患者姓名" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="性别"
                            name="gender"
                            rules={[{ required: true, message: '请选择性别' }]}
                        >
                            <Radio.Group>
                                <Radio value="男">男</Radio>
                                <Radio value="女">女</Radio>
                                <Radio value="未知">未知</Radio>
                            </Radio.Group>
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="身份证号"
                            name="idCardNo"
                            rules={[
                                { pattern: /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/, message: '请输入正确的身份证号' }
                            ]}
                            help="系统将自动检测重复病例"
                        >
                            <Input placeholder="请输入身份证号" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="年龄"
                            name="age"
                            rules={[
                                { required: true, message: '请输入年龄' },
                                { type: 'number', min: 0, max: 150, transform: (value) => Number(value), message: '年龄必须在0-150之间' }
                            ]}
                        >
                            <Input suffix="岁" placeholder="请输入年龄" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="联系电话"
                            name="phone"
                            rules={[
                                { required: true, message: '请输入联系电话' },
                                { pattern: /^1[3-9]\d{9}$/, message: '请输入正确的手机号' }
                            ]}
                        >
                            <Input placeholder="请输入联系电话" />
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="现住址"
                            name="address"
                            rules={[{ required: true, message: '请输入现住址', min: 5, max: 500 }]}
                        >
                            <Input.TextArea rows={2} placeholder="请输入现住址" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="报告单位"
                            name="reportOrgId"
                            initialValue="北京市朝阳区疾控中心" // Mock current user's org
                        >
                            <Input readOnly />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="报告人员"
                            name="reportUserId"
                            initialValue="李医生" // Mock current user
                        >
                            <Input readOnly />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="报告日期"
                            name="reportDate"
                            rules={[{ required: true, message: '请选择报告日期' }]}
                        >
                            <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="症状开始日期"
                            name="symptomOnsetDate"
                            rules={[{ required: true, message: '请选择症状开始日期' }]}
                        >
                            <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="临床症状描述"
                            name="clinicalSymptoms"
                            rules={[{ required: true, message: '请输入临床症状描述', min: 20, max: 2000 }]}
                        >
                            <Input.TextArea rows={3} placeholder="请详细描述临床症状" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="疑似病原体"
                            name="suspectedPathogen"
                            rules={[{ max: 200, message: '疑似病原体不能超过200字' }]}
                        >
                            <Input placeholder="请输入疑似病原体" />
                        </Form.Item>
                    </Col>
                    <Col span={12}>
                        <Form.Item
                            label="紧急程度"
                            name="urgencyLevel"
                            rules={[{ required: true, message: '请选择紧急程度' }]}
                        >
                            <Radio.Group>
                                <Radio value="高">高</Radio>
                                <Radio value="中">中</Radio>
                                <Radio value="低">低</Radio>
                            </Radio.Group>
                        </Form.Item>
                    </Col>
                    <Col span={24}>
                        <Form.Item
                            label="初步评估"
                            name="initialAssessment"
                            rules={[{ max: 500, message: '初步评估不能超过500字' }]}
                        >
                            <Input.TextArea rows={2} placeholder="请输入初步评估" />
                        </Form.Item>
                    </Col>
                </Row>
            </Form>
        </Card>
    );
};

export default UnknownCaseForm;
---

File: components\NewCase\Step1Form.tsx
---
import { Form, Input, Select, DatePicker, Row, Col, Radio, Typography, Divider } from 'antd';
import type { FormInstance } from 'antd'; // Corrected import for FormInstance
import { diseaseCodes } from '../../data/diseaseCodes';
import moment from 'moment';

const { Title } = Typography;
const { Option } = Select;

interface Step1FormProps {
    form: FormInstance;
}

const Step1Form = ({ form }: Step1FormProps) => {
    return (
        <>
            <Title level={4}>患者基本信息</Title>
            <Divider />
            <Row gutter={16}>
                <Col span={24}>
                    <Form.Item
                        label="疾病类型"
                        name="diseaseId"
                        rules={[{ required: true, message: '请选择疾病类型' }]}
                    >
                        <Select placeholder="请选择疾病">
                            {diseaseCodes.map(disease => (
                                <Option key={disease.id} value={disease.id}>
                                    {disease.diseaseName}
                                </Option>
                            ))}
                        </Select>
                    </Form.Item>
                </Col>
                <Col span={12}>
                    <Form.Item
                        label="患者姓名"
                        name="patientName"
                        rules={[{ required: true, message: '请输入患者姓名', min: 2, max: 50 }]}
                    >
                        <Input />
                    </Form.Item>
                </Col>
                <Col span={12}>
                    <Form.Item
                        label="性别"
                        name="gender"
                        rules={[{ required: true, message: '请选择性别' }]}
                    >
                        <Radio.Group>
                            <Radio value="male">男</Radio>
                            <Radio value="female">女</Radio>
                        </Radio.Group>
                    </Form.Item>
                </Col>
                <Col span={12}>
                    <Form.Item
                        label="身份证号"
                        name="idCard"
                        rules={[
                            { required: true, message: '请输入身份证号' },
                            { pattern: /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/, message: '请输入正确的身份证号' }
                        ]}
                        help="系统将自动检测重复病例"
                    >
                        <Input />
                    </Form.Item>
                </Col>
                <Col span={6}>
                    <Form.Item
                        label="出生日期"
                        name="dob"
                    >
                        <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" />
                    </Form.Item>
                </Col>
                <Col span={6}>
                    <Form.Item
                        label="年龄"
                        name="age"
                        rules={[
                            { required: true, message: '请输入年龄' },
                            { type: 'number', min: 0, max: 150, transform: (value) => Number(value), message: '年龄必须在0-150之间' }
                        ]}
                    >
                        <Input suffix="岁" />
                    </Form.Item>
                </Col>
                <Col span={12}>
                    <Form.Item
                        label="联系电话"
                        name="phone"
                        rules={[
                            { required: true, message: '请输入联系电话' },
                            { pattern: /^1[3-9]\d{9}$/, message: '请输入正确的手机号' }
                        ]}
                    >
                        <Input />
                    </Form.Item>
                </Col>
                <Col span={24}>
                    <Form.Item
                        label="现住地址"
                        name="address"
                        rules={[{ required: true, message: '请输入现住地址', min: 5, max: 200 }]}
                    >
                        <Input.TextArea rows={2} />
                    </Form.Item>
                </Col>
            </Row>
            <Title level={4} style={{ marginTop: 24 }}>报告信息</Title>
            <Divider />
            <Row gutter={16}>
                <Col span={12}>
                    <Form.Item
                        label="报告单位"
                        name="reportUnit"
                    >
                        <Input readOnly />
                    </Form.Item>
                </Col>
                <Col span={12}>
                    <Form.Item
                        label="报告人员"
                        name="reporter"
                    >
                        <Input readOnly />
                    </Form.Item>
                </Col>
                <Col span={12}>
                    <Form.Item
                        label="报告日期"
                        name="reportDate"
                        rules={[{ required: true, message: '请选择报告日期' }]}
                    >
                        <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                    </Form.Item>
                </Col>
                <Col span={12}>
                    <Form.Item
                        label="症状开始日期"
                        name="symptomOnsetDate"
                        rules={[{ required: true, message: '请选择症状开始日期' }]}
                    >
                        <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                    </Form.Item>
                </Col>
            </Row>
        </>
    );
};

export default Step1Form;
---

File: components\NewCase\Step2Form.tsx
---
import { Form, Input, DatePicker, Row, Col, Radio, Typography, Divider, Card } from 'antd';
import type { FormInstance } from 'antd'; // Corrected import for FormInstance
import moment from 'moment';

const { Title } = Typography;

interface Step2FormProps {
    form: FormInstance;
}

const Step2Form = ({ form }: Step2FormProps) => {
    const hasExposure = Form.useWatch('hasExposure', form);
    const hasContact = Form.useWatch('hasContact', form);
    const hasTravel = Form.useWatch('hasTravel', form);

    return (
        <>
            <Title level={4}>流行病学信息</Title>
            <Divider />

            <Card title="暴露史" style={{ marginBottom: 24 }}>
                <Form.Item
                    label="是否有疫区暴露史?"
                    name="hasExposure"
                    rules={[{ required: true, message: '请选择是否有疫区暴露史' }]}
                >
                    <Radio.Group>
                        <Radio value={true}>是</Radio>
                        <Radio value={false}>否</Radio>
                    </Radio.Group>
                </Form.Item>
                {hasExposure && (
                    <Form.Item
                        label="暴露详情"
                        name="exposureHistory"
                        rules={[{ required: true, message: '请详细描述暴露史', min: 10, max: 1000 }]}
                    >
                        <Input.TextArea rows={3} placeholder="请详细描述暴露史" />
                    </Form.Item>
                )}
            </Card>

            <Card title="接触史" style={{ marginBottom: 24 }}>
                <Form.Item
                    label="是否有确诊/疑似病例接触史?"
                    name="hasContact"
                    rules={[{ required: true, message: '请选择是否有接触史' }]}
                >
                     <Radio.Group>
                        <Radio value={true}>是</Radio>
                        <Radio value={false}>否</Radio>
                    </Radio.Group>
                </Form.Item>
                {hasContact && (
                    <>
                        <Row gutter={16}>
                            <Col span={12}>
                                <Form.Item
                                    label="接触时间"
                                    name="contactDate"
                                    rules={[{ required: true, message: '请选择接触时间' }]}
                                >
                                    <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                                </Form.Item>
                            </Col>
                            <Col span={12}>
                                <Form.Item
                                    label="接触地点"
                                    name="contactLocation"
                                    rules={[{ required: true, message: '请输入接触地点' }]}
                                >
                                    <Input placeholder="请输入接触地点" />
                                </Form.Item>
                            </Col>
                        </Row>
                        <Form.Item
                            label="接触详情"
                            name="contactHistory"
                            rules={[{ required: true, message: '请详细描述接触史', min: 10, max: 1000 }]}
                        >
                            <Input.TextArea rows={3} placeholder="请详细描述接触史" />
                        </Form.Item>
                    </>
                )}
            </Card>

            <Card title="旅行史">
                <Form.Item
                    label="近14天是否有外出旅行?"
                    name="hasTravel"
                    rules={[{ required: true, message: '请选择是否有旅行史' }]}
                >
                     <Radio.Group>
                        <Radio value={true}>是</Radio>
                        <Radio value={false}>否</Radio>
                    </Radio.Group>
                </Form.Item>
                {hasTravel && (
                    <>
                        <Row gutter={16}>
                            <Col span={12}>
                                <Form.Item
                                    label="出发时间"
                                    name="travelStartDate"
                                    rules={[{ required: true, message: '请选择出发时间' }]}
                                >
                                    <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                                </Form.Item>
                            </Col>
                            <Col span={12}>
                                <Form.Item
                                    label="返回时间"
                                    name="travelEndDate"
                                    rules={[
                                        { required: true, message: '请选择返回时间' },
                                        ({ getFieldValue }) => ({
                                            validator(_, value) {
                                                if (!value || !getFieldValue('travelStartDate') || value.isSameOrAfter(getFieldValue('travelStartDate'))) {
                                                    return Promise.resolve();
                                                }
                                                return Promise.reject(new Error('返回时间不能早于出发时间!'));
                                            },
                                        }),
                                    ]}
                                >
                                    <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                                </Form.Item>
                            </Col>
                        </Row>
                        <Form.Item
                            label="目的地"
                            name="travelDestination"
                            rules={[{ required: true, message: '请输入目的地' }]}
                        >
                            <Input placeholder="请输入目的地" />
                        </Form.Item>
                        <Form.Item
                            label="旅行详情"
                            name="travelHistory"
                            rules={[{ required: true, message: '请详细描述旅行史', min: 10, max: 1000 }]}
                        >
                            <Input.TextArea rows={3} placeholder="请详细描述旅行史" />
                        </Form.Item>
                    </>
                )}
            </Card>
        </>
    );
};

export default Step2Form;
---

File: components\NewCase\Step3Form.tsx
---
import { Form, Input, Select, DatePicker, Row, Col, Typography, Divider, Checkbox } from 'antd';
import type { FormInstance } from 'antd'; // Corrected import for FormInstance
import moment from 'moment';

const { Title } = Typography;
const { Option } = Select;

interface Step3FormProps {
    form: FormInstance;
}

const Step3Form = ({ form }: Step3FormProps) => {
    const selectedSymptoms = Form.useWatch('symptoms', form) || [];
    const symptomOnsetDate = Form.useWatch('symptomOnsetDate', form);

    return (
        <>
            <Title level={4}>诊断信息</Title>
            <Divider />
            <Row gutter={16}>
                <Col span={12}>
                    <Form.Item
                        label="初步诊断"
                        name="initialDiagnosis"
                        rules={[{ required: true, message: '请输入初步诊断', min: 10, max: 500 }]}
                    >
                        <Input placeholder="请输入初步诊断" />
                    </Form.Item>
                </Col>
                <Col span={12}>
                    <Form.Item
                        label="确诊诊断"
                        name="confirmedDiagnosis"
                    >
                        <Input placeholder="请输入确诊诊断" />
                    </Form.Item>
                </Col>
                <Col span={12}>
                    <Form.Item
                        label="诊断日期"
                        name="diagnosisDate"
                        rules={[
                            { required: true, message: '请选择诊断日期' },
                            ({ getFieldValue }) => ({
                                validator(_, value) {
                                    const symptomStartDate = getFieldValue('symptomOnsetDate');
                                    if (!value || !symptomStartDate || value.isSameOrAfter(symptomStartDate, 'day')) {
                                        return Promise.resolve();
                                    }
                                    return Promise.reject(new Error('诊断日期不能早于症状开始日期!'));
                                },
                            }),
                        ]}
                    >
                        <DatePicker style={{ width: '100%' }} format="YYYY-MM-DD" disabledDate={(current) => current && current > moment().endOf('day')} />
                    </Form.Item>
                </Col>
                <Col span={12}>
                    <Form.Item
                        label="个案来源"
                        name="caseSource"
                        rules={[{ required: true, message: '请选择来源' }]}
                    >
                        <Select placeholder="请选择来源">
                            <Option value="active">主动监测</Option>
                            <Option value="passive">被动报告</Option>
                            <Option value="unknown">不明原因转入</Option>
                        </Select>
                    </Form.Item>
                </Col>
                <Col span={24}>
                    <Form.Item
                        label="症状描述"
                        name="symptoms"
                    >
                         <Checkbox.Group style={{ width: '100%' }}>
                            <Row>
                                <Col span={8}><Checkbox value="fever">发热</Checkbox></Col>
                                <Col span={8}><Checkbox value="cough">咳嗽</Checkbox></Col>
                                <Col span={8}><Checkbox value="fatigue">乏力</Checkbox></Col>
                                <Col span={8}><Checkbox value="soreThroat">咽痛</Checkbox></Col>
                                <Col span={8}><Checkbox value="headache">头痛</Checkbox></Col>
                                <Col span={8}><Checkbox value="diarrhea">腹泻</Checkbox></Col>
                                <Col span={8}><Checkbox value="other">其他</Checkbox></Col>
                            </Row>
                        </Checkbox.Group>
                    </Form.Item>
                </Col>
                 {selectedSymptoms.includes('other') && (
                    <Col span={24}>
                        <Form.Item
                            label="其他症状"
                            name="otherSymptoms"
                            rules={[{ required: true, message: '请描述其他症状', min: 10, max: 500 }]}
                        >
                            <Input.TextArea rows={3} placeholder="请描述其他症状" />
                        </Form.Item>
                    </Col>
                )}
            </Row>
        </>
    );
};

export default Step3Form;
---

File: components\NewCase\Step4Confirm.tsx
---
import { Descriptions, Typography, Divider, Tag } from 'antd';
import type { FormInstance } from 'antd'; // Corrected import for FormInstance
import { diseaseCodes } from '../../data/diseaseCodes';
import moment from 'moment';

const { Title } = Typography;

interface Step4ConfirmProps {
    form: FormInstance;
}

const Step4Confirm = ({ form }: Step4ConfirmProps) => {
    const values = form.getFieldsValue(true);

    const formatDate = (date: moment.Moment | undefined) => date ? date.format('YYYY-MM-DD') : '未填写';

    const getDiseaseName = (diseaseId: string | undefined) => {
        const disease = diseaseCodes.find(d => d.id === diseaseId);
        return disease ? disease.diseaseName : '未选择';
    };

    const renderBoolean = (value: boolean | undefined) => value ? '是' : (value === false ? '否' : '未填写');

    const renderSymptoms = (symptoms: string[] | undefined, otherSymptoms: string | undefined) => {
        if (!symptoms || symptoms.length === 0) return '无';
        const symptomLabels: { [key: string]: string } = {
            fever: '发热',
            cough: '咳嗽',
            fatigue: '乏力',
            soreThroat: '咽痛',
            headache: '头痛',
            diarrhea: '腹泻',
            other: '其他',
        };
        const displayedSymptoms = symptoms.map(s => symptomLabels[s] || s);
        if (symptoms.includes('other') && otherSymptoms) {
            displayedSymptoms[displayedSymptoms.indexOf('其他')] = `其他 (${otherSymptoms})`;
        }
        return displayedSymptoms.join(', ');
    };

    return (
        <div>
            <Title level={4}>确认提交</Title>
            <p>请核对您填写的信息，确认无误后提交。</p>
            
            <Title level={5} style={{ marginTop: 24 }}>患者基本信息</Title>
            <Divider />
            <Descriptions bordered column={2} size="small">
                <Descriptions.Item label="疾病类型">{getDiseaseName(values.diseaseId)}</Descriptions.Item>
                <Descriptions.Item label="患者姓名">{values.patientName}</Descriptions.Item>
                <Descriptions.Item label="性别">{values.gender === 'male' ? '男' : (values.gender === 'female' ? '女' : '未填写')}</Descriptions.Item>
                <Descriptions.Item label="身份证号">{values.idCard}</Descriptions.Item>
                <Descriptions.Item label="出生日期">{formatDate(values.dob)}</Descriptions.Item>
                <Descriptions.Item label="年龄">{values.age ? `${values.age} 岁` : '未填写'}</Descriptions.Item>
                <Descriptions.Item label="联系电话">{values.phone}</Descriptions.Item>
                <Descriptions.Item label="现住地址" span={2}>{values.address}</Descriptions.Item>
            </Descriptions>
            
            <Title level={5} style={{ marginTop: 24 }}>报告信息</Title>
            <Divider />
            <Descriptions bordered column={2} size="small">
                <Descriptions.Item label="报告单位">{values.reportUnit}</Descriptions.Item>
                <Descriptions.Item label="报告人员">{values.reporter}</Descriptions.Item>
                <Descriptions.Item label="报告日期">{formatDate(values.reportDate)}</Descriptions.Item>
                <Descriptions.Item label="症状开始日期">{formatDate(values.symptomOnsetDate)}</Descriptions.Item>
            </Descriptions>

            <Title level={5} style={{ marginTop: 24 }}>流行病学信息</Title>
            <Divider />
            <Descriptions bordered column={1} size="small">
                <Descriptions.Item label="疫区暴露史">{renderBoolean(values.hasExposure)}</Descriptions.Item>
                {values.hasExposure && <Descriptions.Item label="暴露详情">{values.exposureHistory}</Descriptions.Item>}

                <Descriptions.Item label="确诊/疑似病例接触史">{renderBoolean(values.hasContact)}</Descriptions.Item>
                {values.hasContact && (
                    <>
                        <Descriptions.Item label="接触时间">{formatDate(values.contactDate)}</Descriptions.Item>
                        <Descriptions.Item label="接触地点">{values.contactLocation}</Descriptions.Item>
                        <Descriptions.Item label="接触详情">{values.contactHistory}</Descriptions.Item>
                    </>
                )}

                <Descriptions.Item label="近14天外出旅行史">{renderBoolean(values.hasTravel)}</Descriptions.Item>
                {values.hasTravel && (
                    <>
                        <Descriptions.Item label="出发时间">{formatDate(values.travelStartDate)}</Descriptions.Item>
                        <Descriptions.Item label="返回时间">{formatDate(values.travelEndDate)}</Descriptions.Item>
                        <Descriptions.Item label="目的地">{values.travelDestination}</Descriptions.Item>
                        <Descriptions.Item label="旅行详情">{values.travelHistory}</Descriptions.Item>
                    </>
                )}
            </Descriptions>

            <Title level={5} style={{ marginTop: 24 }}>诊断信息</Title>
            <Divider />
            <Descriptions bordered column={2} size="small">
                <Descriptions.Item label="初步诊断">{values.initialDiagnosis}</Descriptions.Item>
                <Descriptions.Item label="确诊诊断">{values.confirmedDiagnosis || '未填写'}</Descriptions.Item>
                <Descriptions.Item label="诊断日期">{formatDate(values.diagnosisDate)}</Descriptions.Item>
                <Descriptions.Item label="个案来源">{values.caseSource}</Descriptions.Item>
                <Descriptions.Item label="症状" span={2}>
                    {renderSymptoms(values.symptoms, values.otherSymptoms)}
                </Descriptions.Item>
            </Descriptions>
        </div>
    );
};

export default Step4Confirm;
---

File: data\alerts.ts
---
export interface Alert {
    id: string;
    alertNo: string;
    type: string;
    location: string;
    detectionTime: string;
    level: '一级' | '二级' | '三级' | '四级';
    status: '待处理' | '处理中' | '已核实' | '误报';
    relatedCases: number;
    triggerRule: string;
    summary: string;
}

export const alerts: Alert[] = [
    {
        id: '1',
        alertNo: 'ALT-2024-012',
        type: '病例聚集',
        location: '北京市朝阳区',
        detectionTime: '2024-01-15 10:30',
        level: '一级',
        status: '待处理',
        relatedCases: 5,
        triggerRule: '7天内同地区同疾病>5例',
        summary: '朝阳区XX街道近7天内发现5例新冠肺炎确诊病例，存在社区传播风险。'
    },
    {
        id: '2',
        alertNo: 'ALT-2024-011',
        type: '异常症状',
        location: '上海市浦东区',
        detectionTime: '2024-01-14 15:20',
        level: '二级',
        status: '处理中',
        relatedCases: 3,
        triggerRule: '出现异常症状聚集',
        summary: '浦东区发现3例患者出现相似异常神经系统症状，疑似新型病毒感染。'
    },
    {
        id: '3',
        alertNo: 'ALT-2024-010',
        type: '新发疾病',
        location: '广东省深圳市',
        detectionTime: '2024-01-13 09:45',
        level: '一级',
        status: '已核实',
        relatedCases: 2,
        triggerRule: '检测到新发疾病',
        summary: '深圳市发现2例不明原因肺炎，已确诊为新型冠状病毒变种。'
    },
    {
        id: '4',
        alertNo: 'ALT-2024-009',
        type: '病例聚集',
        location: '浙江省杭州市',
        detectionTime: '2024-01-12 14:10',
        level: '三级',
        status: '误报',
        relatedCases: 4,
        triggerRule: '7天内同地区同疾病>3例',
        summary: '经核实为重复报告，非真实病例聚集。'
    }
]
---

File: data\cases.ts
---
export interface Case {
  id: string;
  caseNo: string;
  patientName: string;
  disease: string;
  reportDate: string;
  status: '待核实' | '处理中' | '已关闭';
  gender: '男' | '女';
  age: number;
  idCard: string;
  phone: string;
  address: string;
  reportUnit: string;
  reporter: string;
  symptomOnsetDate: string;
  diagnosisDate: string;
  diagnosis: string;
  source: string;
}

export const cases: Case[] = [
  {
    id: '1',
    caseNo: 'CAS-2024-156',
    patientName: '张三',
    disease: '新冠肺炎',
    reportDate: '2024-01-15',
    status: '待核实',
    gender: '男',
    age: 45,
    idCard: '110101197901011234',
    phone: '138****5678',
    address: '北京市朝阳区XX街道XX小区XX号楼XX单元',
    reportUnit: '北京市朝阳区疾控中心',
    reporter: '李医生',
    symptomOnsetDate: '2024-01-10',
    diagnosisDate: '2024-01-14',
    diagnosis: '新冠肺炎（待核实）',
    source: '主动监测',
  },
  {
    id: '2',
    caseNo: 'CAS-2024-155',
    patientName: '李四',
    disease: '霍乱',
    reportDate: '2024-01-15',
    status: '待核实',
    gender: '女',
    age: 32,
    idCard: '440101199203045678',
    phone: '139****1234',
    address: '广东省广州市天河区XX路',
    reportUnit: '广州市天河区疾控中心',
    reporter: '王医生',
    symptomOnsetDate: '2024-01-12',
    diagnosisDate: '2024-01-15',
    diagnosis: '霍乱',
    source: '被动报告',
  },
  {
    id: '3',
    caseNo: 'CAS-2024-154',
    patientName: '王五',
    disease: '鼠疫',
    reportDate: '2024-01-14',
    status: '处理中',
    gender: '男',
    age: 50,
    idCard: '51010119740506123X',
    phone: '137****8765',
    address: '四川省成都市武侯区XX街',
    reportUnit: '成都市武侯区疾控中心',
    reporter: '赵医生',
    symptomOnsetDate: '2024-01-11',
    diagnosisDate: '2024-01-14',
    diagnosis: '鼠疫',
    source: '主动监测',
  },
  {
    id: '4',
    caseNo: 'CAS-2024-153',
    patientName: '赵六',
    disease: '新冠肺炎',
    reportDate: '2024-01-14',
    status: '处理中',
    gender: '男',
    age: 28,
    idCard: '310101199608094321',
    phone: '136****5432',
    address: '上海市浦东新区XX大道',
    reportUnit: '上海市浦东新区疾控中心',
    reporter: '孙医生',
    symptomOnsetDate: '2024-01-10',
    diagnosisDate: '2024-01-13',
    diagnosis: '新冠肺炎',
    source: '被动报告',
  },
  {
    id: '5',
    caseNo: 'CAS-2024-152',
    patientName: '孙七',
    disease: '霍乱',
    reportDate: '2024-01-13',
    status: '已关闭',
    gender: '女',
    age: 65,
    idCard: '330101195911128765',
    phone: '135****9876',
    address: '浙江省杭州市西湖区XX路',
    reportUnit: '杭州市西湖区疾控中心',
    reporter: '周医生',
    symptomOnsetDate: '2024-01-09',
    diagnosisDate: '2024-01-12',
    diagnosis: '霍乱',
    source: '主动监测',
  },
];
---

File: data\dashboard.ts
---
export const metrics = [
    { title: '本月新增个案', value: 156, trend: 15, unit: '%' },
    { title: '待核实个案', value: 3, link: '/cases?status=待核实' },
    { title: '处理中个案', value: 12, link: '/cases?status=处理中' },
    { title: '本月预警事件', value: 2, link: '/alerts?status=待处理' },
];

export const todoItems = [
    { 
        id: 'todo-1',
        category: '待核实个案',
        count: 3,
        items: [
            'CAS-2024-156 | 李四 | 新冠肺炎 | 2024-01-15',
            'CAS-2024-155 | 王五 | 霍乱     | 2024-01-15',
            'CAS-2024-154 | 赵六 | 鼠疫     | 2024-01-14',
        ]
    },
    {
        id: 'todo-2',
        category: '待确认检测',
        count: 5,
        items: [
            'TEST-2024-089 | CAS-2024-150 | 核酸检测',
            'TEST-2024-088 | CAS-2024-149 | 抗体检测',
        ]
    },
    {
        id: 'todo-3',
        category: '待处理预警',
        count: 2,
        items: [
            'ALT-2024-012 | 病例聚集 | 北京市 | 高风险',
            'ALT-2024-011 | 异常症状 | 上海市 | 中风险',
        ]
    }
];

export const recentVisits = [
    { id: 'rv-1', name: 'CAS-2024-156', link: '/cases/1' },
    { id: 'rv-2', name: 'CAS-2024-150', link: '/cases/2' },
    { id: 'rv-3', name: 'ALT-2024-012', link: '/alerts' },
    { id: 'rv-4', name: '疾病统计报表', link: '/statistics' },
];

export const quickAccess = [
    { id: 'qa-1', name: '新增个案', link: '/cases/new' },
    { id: 'qa-2', name: '新增不明病例', link: '/unknown-cases/new' },
    { id: 'qa-3', name: '疾病统计', link: '/statistics' },
    { id: 'qa-4', name: '导出报告', link: '#' },
];
---

File: data\diseaseCodes.ts
---
export interface DiseaseCode {
    id: string;
    diseaseName: string;
    diseaseCode: string;
    icd10: string;
    category: '甲类' | '乙类' | '丙类' | '其他';
    riskLevel: '高' | '中' | '低';
}

export const diseaseCodes: DiseaseCode[] = [
    {
        id: '1',
        diseaseName: '鼠疫',
        diseaseCode: 'D001',
        icd10: 'A20',
        category: '甲类',
        riskLevel: '高'
    },
    {
        id: '2',
        diseaseName: '霍乱',
        diseaseCode: 'D002',
        icd10: 'A00',
        category: '甲类',
        riskLevel: '高'
    },
    {
        id: '3',
        diseaseName: '新冠肺炎',
        diseaseCode: 'D003',
        icd10: 'U07.1',
        category: '乙类',
        riskLevel: '中'
    },
    {
        id: '4',
        diseaseName: '艾滋病',
        diseaseCode: 'D004',
        icd10: 'B20-B24',
        category: '乙类',
        riskLevel: '中'
    },
    {
        id: '5',
        diseaseName: '流行性感冒',
        diseaseCode: 'D005',
        icd10: 'J10-J11',
        category: '丙类',
        riskLevel: '低'
    },
     {
        id: '6',
        diseaseName: '手足口病',
        diseaseCode: 'D006',
        icd10: 'B08.4',
        category: '丙类',
        riskLevel: '低'
    },
];
---

File: data\followUps.ts
---
export interface FollowUp {
    id: string;
    caseId: string;
    date: string;
    method: '电话随访' | '现场随访' | '线上随访';
    doctor: string;
    healthStatus: '好转' | '稳定' | '异常' | '恶化';
    temperature: string;
    symptoms: string;
    notes: string;
    // New fields from PF-5.2.2
    treatmentCompliance: '良好' | '一般' | '差';
    nextFollowUpDate?: string; // Optional, as per PF-5.2.2
}

export const followUps: FollowUp[] = [
    {
        id: 'fu1',
        caseId: '1',
        date: '2024-01-15',
        method: '电话随访',
        doctor: '李医生',
        healthStatus: '好转',
        temperature: '36.8°C',
        symptoms: '咳嗽减轻，无发热',
        notes: '患者状况良好，继续居家隔离。',
        treatmentCompliance: '良好',
        nextFollowUpDate: '2024-01-18',
    },
    {
        id: 'fu2',
        caseId: '1',
        date: '2024-01-12',
        method: '现场随访',
        doctor: '王护士',
        healthStatus: '异常',
        temperature: '38.2°C',
        symptoms: '发热、咳嗽、乏力',
        notes: '已建议患者及时就医，并开具相应药物。',
        treatmentCompliance: '差',
        nextFollowUpDate: '2024-01-13',
    },
    {
        id: 'fu3',
        caseId: '1',
        date: '2024-01-10',
        method: '电话随访',
        doctor: '李医生',
        healthStatus: '稳定',
        temperature: '37.5°C',
        symptoms: '轻微咳嗽',
        notes: '患者初次随访，情绪稳定。',
        treatmentCompliance: '良好',
        nextFollowUpDate: '2024-01-11',
    },
];
---

File: data\pathogens.ts
---
export interface Pathogen {
    id: string;
    name: string;
    code: string;
    scientificName: string;
    type: '病毒' | '细菌' | '真菌' | '寄生虫';
    bsl: 'BSL-1' | 'BSL-2' | 'BSL-3' | 'BSL-4';
}

export const pathogens: Pathogen[] = [
    {
        id: 'p1',
        name: '新型冠状病毒',
        code: 'P001',
        scientificName: 'SARS-CoV-2',
        type: '病毒',
        bsl: 'BSL-3',
    },
    {
        id: 'p2',
        name: '霍乱弧菌',
        code: 'P002',
        scientificName: 'Vibrio cholerae',
        type: '细菌',
        bsl: 'BSL-2',
    },
    {
        id: 'p3',
        name: '鼠疫耶尔森菌',
        code: 'P003',
        scientificName: 'Yersinia pestis',
        type: '细菌',
        bsl: 'BSL-3',
    },
    {
        id: 'p4',
        name: '人类免疫缺陷病毒',
        code: 'P004',
        scientificName: 'HIV',
        type: '病毒',
        bsl: 'BSL-2',
    },
    {
        id: 'p5',
        name: '甲型流感病毒',
        code: 'P005',
        scientificName: 'Influenza A virus',
        type: '病毒',
        bsl: 'BSL-2',
    },
];
---

File: data\testRecords.ts
---
export interface TestRecord {
    id: string;
    caseId?: string; // Made optional
    unknownCaseId?: string; // Added for unknown cases
    collectionTime: string;
    sampleType: '咽拭子' | '血液' | '粪便' | '尿液';
    testType: '核酸检测' | '抗体检测' | '培养' | '影像学';
    result: '阳性' | '阴性' | '待定';
    pathogen?: string;
    lab: string;
    // New fields from PF-5.2.2
    testStatus: '待确认' | '已确认';
    isPushedToLab: boolean; // Indicates if the test request was pushed to a lab system
}

export const testRecords: TestRecord[] = [
    {
        id: 'test1',
        caseId: '1',
        collectionTime: '2024-01-14 09:00',
        sampleType: '咽拭子',
        testType: '核酸检测',
        result: '阳性',
        pathogen: '新型冠状病毒 (SARS-CoV-2)',
        lab: '北京市疾控中心实验室',
        testStatus: '已确认',
        isPushedToLab: true,
    },
    {
        id: 'test2',
        caseId: '1',
        collectionTime: '2024-01-14 09:05',
        sampleType: '血液',
        testType: '抗体检测',
        result: '阳性',
        pathogen: '新型冠状病毒 (IgM)',
        lab: '北京市疾控中心实验室',
        testStatus: '已确认',
        isPushedToLab: true,
    },
    {
        id: 'test3',
        caseId: '1',
        collectionTime: '2024-01-13 14:30',
        sampleType: '咽拭子',
        testType: '核酸检测',
        result: '待定',
        lab: '北京市第三方检测机构',
        testStatus: '待确认',
        isPushedToLab: false,
    },
    {
        id: 'test_unk1',
        unknownCaseId: '1', // Linked to unknown case 1
        collectionTime: '2024-01-16 10:00',
        sampleType: '血液',
        testType: '核酸检测',
        result: '待定',
        lab: '上海市疾控中心实验室',
        testStatus: '待确认',
        isPushedToLab: false,
    },
    {
        id: 'test_unk2',
        unknownCaseId: '2', // Linked to unknown case 2
        collectionTime: '2024-01-15 11:30',
        sampleType: '咽拭子',
        testType: '培养',
        result: '待定',
        lab: '上海市第三方检测机构',
        testStatus: '检测中',
        isPushedToLab: true,
    },
];
---

File: data\trackingRecords.ts
---
export interface TrackingRecord {
    id: string;
    caseId: string;
    date: string; // This will now represent the record creation date or a key date for the event
    type: '旅居史' | '接触史' | '场所暴露史';
    location: string;
    lat: number;
    lng: number;
    description: string;
    // New fields from PF-5.2.2
    startDate: string;
    endDate: string;
    riskAssessment: '高风险' | '中风险' | '低风险';
    isPushedToEpi: boolean; // Indicates if the record was pushed to an epidemiological investigation system
}

export const trackingRecords: TrackingRecord[] = [
    {
        id: 'track1',
        caseId: '1',
        date: '2024-01-08', // Record creation date or main event date
        type: '场所暴露史',
        location: '北京市朝阳区三里屯太古里',
        lat: 39.9343,
        lng: 116.4554,
        description: '与朋友聚餐，停留约2小时。',
        startDate: '2024-01-08',
        endDate: '2024-01-08',
        riskAssessment: '中风险',
        isPushedToEpi: true,
    },
    {
        id: 'track2',
        caseId: '1',
        date: '2024-01-09',
        type: '旅居史',
        location: '北京市大兴国际机场',
        lat: 39.509,
        lng: 116.410,
        description: '乘坐CA1234航班前往上海。',
        startDate: '2024-01-09',
        endDate: '2024-01-09',
        riskAssessment: '高风险',
        isPushedToEpi: true,
    },
    {
        id: 'track3',
        caseId: '1',
        date: '2024-01-10',
        type: '场所暴露史',
        location: '上海市外滩',
        lat: 31.239,
        lng: 121.499,
        description: '在外滩观光，停留约3小时。',
        startDate: '2024-01-10',
        endDate: '2024-01-10',
        riskAssessment: '中风险',
        isPushedToEpi: false,
    },
    {
        id: 'track4',
        caseId: '1',
        date: '2024-01-05',
        type: '接触史',
        location: '北京市某小区',
        lat: 39.9042,
        lng: 116.4074,
        description: '与确诊病例李某有密切接触。',
        startDate: '2024-01-05',
        endDate: '2024-01-05',
        riskAssessment: '高风险',
        isPushedToEpi: true,
    },
];
---

File: data\treatments.ts
---
export interface Treatment {
    id: string;
    caseId: string;
    date: string;
    type: '门诊' | '住院' | '居家隔离';
    hospital: string;
    diagnosis: string;
    plan: string;
    outcome: '治愈' | '好转' | '无效' | '死亡' | '转院';
    // New field from PF-5.2.2
    dischargeDate?: string; // Only applicable for '住院' type
}

export const treatments: Treatment[] = [
    {
        id: 'tr1',
        caseId: '1',
        date: '2024-01-12',
        type: '住院',
        hospital: '北京市地坛医院',
        diagnosis: '新冠肺炎（普通型）',
        plan: '抗病毒治疗，对症支持治疗。',
        outcome: '好转',
        dischargeDate: '2024-01-20', // Example discharge date
    },
    {
        id: 'tr2',
        caseId: '2',
        date: '2024-01-15',
        type: '住院',
        hospital: '广州市第八人民医院',
        diagnosis: '霍乱',
        plan: '液体复苏，抗生素治疗。',
        outcome: '好转',
        dischargeDate: '2024-01-22', // Example discharge date
    },
    {
        id: 'tr3',
        caseId: '1',
        date: '2024-01-05',
        type: '门诊',
        hospital: '北京市朝阳医院',
        diagnosis: '普通感冒',
        plan: '对症治疗，多休息。',
        outcome: '治愈',
        // No dischargeDate for outpatient
    },
];
---

File: data\unknownCases.ts
---
export interface UnknownCase {
    id: string;
    caseNo: string;
    patientName: string;
    reportDate: string;
    status: '待检测' | '检测中' | '已确诊' | '已排除' | '已推送';
    urgency: '高' | '中' | '低';
    gender: '男' | '女';
    age: number;
    symptoms: string;
    confirmedDisease?: string;
}

export const unknownCases: UnknownCase[] = [
    {
        id: '1',
        caseNo: 'UNK-2024-023',
        patientName: '张三',
        reportDate: '2024-01-15',
        status: '待检测',
        urgency: '高',
        gender: '男',
        age: 45,
        symptoms: '持续高烧、呼吸困难、原因不明'
    },
    {
        id: '2',
        caseNo: 'UNK-2024-022',
        patientName: '李四',
        reportDate: '2024-01-14',
        status: '检测中',
        urgency: '中',
        gender: '女',
        age: 32,
        symptoms: '神经系统症状、间歇性抽搐'
    },
    {
        id: '3',
        caseNo: 'UNK-2024-021',
        patientName: '王五',
        reportDate: '2024-01-13',
        status: '已确诊',
        urgency: '中',
        gender: '男',
        age: 38,
        symptoms: '发热、干咳、乏力',
        confirmedDisease: '新冠肺炎'
    },
    {
        id: '4',
        caseNo: 'UNK-2024-020',
        patientName: '赵六',
        reportDate: '2024-01-12',
        status: '已推送',
        urgency: '高',
        gender: '男',
        age: 28,
        symptoms: '严重腹泻、脱水、呕吐',
        confirmedDisease: '霍乱'
    },
    {
        id: '5',
        caseNo: 'UNK-2024-019',
        patientName: '孙七',
        reportDate: '2024-01-11',
        status: '已排除',
        urgency: '低',
        gender: '女',
        age: 65,
        symptoms: '普通流感症状',
        confirmedDisease: '甲型流感'
    }
]
---

File: layouts\GlobalLayout.tsx
---
import { useState } from 'react';
import {
    DesktopOutlined,
    PieChartOutlined,
    UserOutlined,
    AlertOutlined,
    ExperimentOutlined,
    FileProtectOutlined,
    DatabaseOutlined,
    SettingOutlined,
    MenuFoldOutlined,
    MenuUnfoldOutlined,
    BellOutlined,
    BugOutlined, // Added for pathogens
} from '@ant-design/icons';
import type { MenuProps } from 'antd';
import { Avatar, Badge, Breadcrumb, Dropdown, Layout, Menu, Space, theme } from 'antd';
import { Outlet, useMatches, Link } from 'react-router-dom';
import Logo from '../assets/logo.svg';

const { Header, Content, Sider } = Layout;

type MenuItem = Required<MenuProps>['items'][number];

function getItem(
    label: React.ReactNode,
    key: React.Key,
    icon?: React.ReactNode,
    children?: MenuItem[],
): MenuItem {
    return {
        key,
        icon,
        children,
        label,
    } as MenuItem;
}

const menuItems: MenuItem[] = [
    getItem(<Link to="/">首页</Link>, '/', <PieChartOutlined />),
    getItem('个案管理', 'sub1', <UserOutlined />, [
        getItem(<Link to="/cases">个案列表</Link>, '/cases'),
    ]),
    getItem('不明原因疾病', 'sub2', <ExperimentOutlined />, [
        getItem(<Link to="/unknown-cases">病例列表</Link>, '/unknown-cases'),
    ]),
    getItem('预警管理', 'sub3', <AlertOutlined />, [
        getItem(<Link to="/alerts">预警列表</Link>, '/alerts'),
    ]),
    getItem('统计分析', 'sub4', <DesktopOutlined />, [
        getItem(<Link to="/statistics">疾病统计</Link>, '/statistics'),
    ]),
    getItem('基础数据管理', 'sub5', <DatabaseOutlined />, [
        getItem(<Link to="/disease-codes">疾病编码管理</Link>, '/disease-codes'),
        getItem(<Link to="/pathogens">病原微生物管理</Link>, '/pathogens', <BugOutlined />),
    ]),
    getItem('系统管理', 'sub6', <SettingOutlined />, [
        getItem('用户管理', '11'),
        getItem('角色权限管理', '12'),
    ]),
];

const userMenuItems = [
    { key: '1', label: '个人中心' },
    { key: '2', label: '修改密码' },
    { type: 'divider' },
    { key: '3', label: '退出登录' },
];

const GlobalLayout = () => {
    const [collapsed, setCollapsed] = useState(false);
    const {
        token: { colorBgContainer, borderRadiusLG },
    } = theme.useToken();

    const matches = useMatches();
    const breadcrumbItems = matches
        .filter((match: any) => match.handle?.crumb)
        .map((match: any) => ({
            title: <Link to={match.pathname}>{match.handle.crumb(match.data)}</Link>,
        }));


    return (
        <Layout style={{ minHeight: '100vh' }}>
            <Sider trigger={null} collapsible collapsed={collapsed}>
                <div style={{
                    height: '32px',
                    margin: '16px',
                    background: 'rgba(255, 255, 255, 0.2)',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    borderRadius: '6px',
                    color: 'white',
                    gap: '8px'
                }}>
                    <img src={Logo} alt="logo" style={{ height: '24px', width: '24px' }} />
                    {!collapsed && <span>传染病监测系统</span>}
                </div>
                <Menu theme="dark" defaultSelectedKeys={['/']} mode="inline" items={menuItems} />
            </Sider>
            <Layout>
                <Header style={{ padding: '0 16px', background: colorBgContainer, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                    <MenuFoldOutlined
                        className="trigger"
                        onClick={() => setCollapsed(!collapsed)}
                        style={{ fontSize: '18px' }}
                    />
                    <Space size="middle">
                        <Badge count={3}>
                            <BellOutlined style={{ fontSize: '18px' }} />
                        </Badge>
                        <Dropdown menu={{ items: userMenuItems }} placement="bottomRight">
                            <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />
                        </Dropdown>
                    </Space>
                </Header>
                <Content style={{ margin: '0 16px', display: 'flex', flexDirection: 'column' }}>
                    <Breadcrumb style={{ margin: '16px 0' }} items={[{ title: <Link to="/">首页</Link> }, ...breadcrumbItems]} />
                    <div
                        style={{
                            padding: 24,
                            flex: 1,
                            background: colorBgContainer,
                            borderRadius: borderRadiusLG,
                            overflowY: 'auto'
                        }}
                    >
                        <Outlet />
                    </div>
                </Content>
            </Layout>
        </Layout>
    );
};

export default GlobalLayout;
---

File: pages\AlertDetail.tsx
---
import { Card, Space, Typography, Button, Descriptions, Tag } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import { alerts } from '../data/alerts';

const { Title, Text } = Typography;

const AlertDetail = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const alertData = alerts.find(a => a.id === id);

    if (!alertData) {
        return (
            <Card>
                <Title level={4}>预警详情</Title>
                <Text>未找到该预警信息。</Text>
                <Button type="primary" onClick={() => navigate('/alerts')}>返回预警列表</Button>
            </Card>
        );
    }

    const getLevelTag = (level: string) => {
        let color = 'default';
        if (level === '一级') color = 'red';
        if (level === '二级') color = 'orange';
        if (level === '三级') color = 'gold';
        if (level === '四级') color = 'blue';
        return <Tag color={color}>{level}</Tag>;
    };

    const getStatusTag = (status: string) => {
        let color = 'default';
        if (status === '待处理') color = 'gold';
        if (status === '处理中') color = 'blue';
        if (status === '已核实') color = 'success';
        if (status === '误报') color = 'default';
        return <Tag color={color}>{status}</Tag>;
    };

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Card>
                <Descriptions title={`预警编号: ${alertData.alertNo}`} bordered column={2}
                    extra={
                        <Space>
                            <Button type="primary">处理预警</Button>
                            <Button onClick={() => navigate('/alerts')}>返回列表</Button>
                        </Space>
                    }
                >
                    <Descriptions.Item label="预警类型">{alertData.type}</Descriptions.Item>
                    <Descriptions.Item label="预警级别">{getLevelTag(alertData.level)}</Descriptions.Item>
                    <Descriptions.Item label="状态">{getStatusTag(alertData.status)}</Descriptions.Item>
                    <Descriptions.Item label="检测时间">{alertData.detectionTime}</Descriptions.Item>
                    <Descriptions.Item label="位置">{alertData.location}</Descriptions.Item>
                    <Descriptions.Item label="关联病例">{alertData.relatedCases} 例</Descriptions.Item>
                    <Descriptions.Item label="触发规则" span={2}>{alertData.triggerRule}</Descriptions.Item>
                    <Descriptions.Item label="摘要" span={2}>{alertData.summary}</Descriptions.Item>
                </Descriptions>
            </Card>
        </Space>
    );
};

export default AlertDetail;
---

File: pages\AlertList.tsx
---
import { Card, Col, DatePicker, Form, Input, Row, Select, Space, Button, List, Tag, Typography } from 'antd';
import { type Alert, alerts } from '../data/alerts';
import { Link } from 'react-router-dom'; // Import Link

const { RangePicker } = DatePicker;
const { Text } = Typography;

const AlertList = () => {

    const getLevelTag = (level: string) => {
        let color = 'default';
        if (level === '一级') color = 'red';
        if (level === '二级') color = 'orange';
        if (level === '三级') color = 'gold';
        if (level === '四级') color = 'blue';
        return <Tag color={color}>{level}</Tag>;
    };

    const getStatusTag = (status: string) => {
        let color = 'default';
        if (status === '待处理') color = 'gold';
        if (status === '处理中') color = 'blue';
        if (status === '已核实') color = 'success';
        if (status === '误报') color = 'default';
        return <Tag color={color}>{status}</Tag>;
    };

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Card>
                <Form layout="vertical">
                    <Row gutter={16}>
                        <Col span={6}>
                            <Form.Item label="预警编号">
                                <Input placeholder="请输入" />
                            </Form.Item>
                        </Col>
                        <Col span={6}>
                            <Form.Item label="预警类型">
                                <Select placeholder="请选择" />
                            </Form.Item>
                        </Col>
                        <Col span={6}>
                            <Form.Item label="预警等级">
                                <Select placeholder="请选择" />
                            </Form.Item>
                        </Col>
                        <Col span={6}>
                            <Form.Item label="预警状态">
                                <Select placeholder="请选择" />
                            </Form.Item>
                        </Col>
                    </Row>
                    <Row>
                        <Col span={24} style={{ textAlign: 'right' }}>
                            <Space>
                                <Button type="primary">查询</Button>
                                <Button>重置</Button>
                            </Space>
                        </Col>
                    </Row>
                </Form>
            </Card>

            <List
                grid={{ gutter: 16, xs: 1, sm: 1, md: 2, lg: 2, xl: 3, xxl: 3 }}
                dataSource={alerts}
                renderItem={(item: Alert) => (
                    <List.Item>
                        <Card
                            title={item.alertNo}
                            extra={
                                <Button type="primary" ghost={item.status !== '待处理'} size="small">
                                    <Link to={`/alerts/${item.id}/detail`}> {/* Updated link */}
                                        {item.status === '待处理' ? '处理' : '查看'}
                                    </Link>
                                </Button>
                            }
                        >
                            <Space direction="vertical" style={{ width: '100%' }}>
                                <Row justify="space-between">
                                    <Text strong>{item.type}</Text>
                                    {getLevelTag(item.level)}
                                </Row>
                                <Text type="secondary">{item.detectionTime}</Text>
                                <Text>{item.location}</Text>
                                <Text><strong>摘要:</strong> {item.summary}</Text>
                                <Row justify="space-between">
                                    <Text type="secondary">关联病例: {item.relatedCases}例</Text>
                                    {getStatusTag(item.status)}
                                </Row>
                            </Space>
                        </Card>
                    </List.Item>
                )}
            />
        </Space>
    );
};

export default AlertList;
---

File: pages\CaseDetail.tsx
---
import { useParams, Link } from 'react-router-dom';
import { Card, Descriptions, Tabs, Tag, Space, Button, Empty, List, Typography } from 'antd';
import { type Case, cases } from '../data/cases';
import { type FollowUp, followUps } from '../data/followUps';
import { type Treatment, treatments } from '../data/treatments';
import { type TestRecord, testRecords } from '../data/testRecords';
import { type TrackingRecord, trackingRecords } from '../data/trackingRecords';
import TrajectoryMap from '../components/TrajectoryMap';

const { TabPane } = Tabs;

const CaseDetail = () => {
    const { id } = useParams<{ id: string }>();
    const caseData = cases.find(c => c.id === id);
    const caseFollowUps = followUps.filter(fu => fu.caseId === id);
    const caseTreatments = treatments.filter(t => t.caseId === id);
    const caseTestRecords = testRecords.filter(tr => tr.caseId === id);
    const caseTrackingRecords = trackingRecords.filter(tr => tr.caseId === id);

    if (!caseData) {
        return <Empty description="未找到个案信息" />;
    }

    const getStatusTag = (status: string) => {
        let color = 'default';
        if (status === '待核实') color = 'gold';
        if (status === '处理中') color = 'blue';
        if (status === '已关闭') color = 'green';
        return <Tag color={color}>{status}</Tag>;
    };

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Card>
                <Descriptions title={`个案编号: ${caseData.caseNo}`} bordered column={2}
                    extra={
                        <Space>
                            <Button type="primary"><Link to={`/cases/${caseData.id}/edit`}>编辑</Link></Button> {/* Updated link */}
                            <Button>推送流调</Button>
                            <Button danger>结案</Button>
                            <Button><Link to="/cases">返回列表</Link></Button>
                        </Space>
                    }
                >
                    <Descriptions.Item label="患者姓名">{caseData.patientName}</Descriptions.Item>
                    <Descriptions.Item label="个案状态">{getStatusTag(caseData.status)}</Descriptions.Item>
                    <Descriptions.Item label="疾病">{caseData.disease}</Descriptions.Item>
                    <Descriptions.Item label="报告日期">{caseData.reportDate}</Descriptions.Item>
                    <Descriptions.Item label="报告人">{caseData.reporter}</Descriptions.Item>
                    <Descriptions.Item label="报告单位">{caseData.reportUnit}</Descriptions.Item>
                </Descriptions>
            </Card>
            <Card>
                <Tabs defaultActiveKey="1">
                    <TabPane tab="基本信息" key="1">
                        <Descriptions title="患者基本信息" bordered column={2}>
                            <Descriptions.Item label="姓名">{caseData.patientName}</Descriptions.Item>
                            <Descriptions.Item label="性别">{caseData.gender}</Descriptions.Item>
                            <Descriptions.Item label="年龄">{caseData.age}</Descriptions.Item>
                            <Descriptions.Item label="身份证号">{caseData.idCard}</Descriptions.Item>
                            <Descriptions.Item label="联系电话">{caseData.phone}</Descriptions.Item>
                            <Descriptions.Item label="现住址" span={2}>{caseData.address}</Descriptions.Item>
                        </Descriptions>
                        <Descriptions title="诊断信息" bordered column={2} style={{ marginTop: 24 }}>
                            <Descriptions.Item label="症状开始日期">{caseData.symptomOnsetDate}</Descriptions.Item>
                            <Descriptions.Item label="诊断日期">{caseData.diagnosisDate}</Descriptions.Item>
                            <Descriptions.Item label="诊断" span={2}>{caseData.diagnosis}</Descriptions.Item>
                            <Descriptions.Item label="个案来源" span={2}>{caseData.source}</Descriptions.Item>
                        </Descriptions>
                    </TabPane>
                    <TabPane tab="流行病学信息" key="2">
                        <Space direction="vertical" style={{ width: '100%' }}>
                            <Typography.Paragraph>
                                <Typography.Text strong>暴露史:</Typography.Text> 曾到疫区出差，接触过高风险人群。
                            </Typography.Paragraph>
                            <Typography.Paragraph>
                                <Typography.Text strong>接触史:</Typography.Text> 无明确接触史。
                            </Typography.Paragraph>
                            <Typography.Paragraph>
                                <Typography.Text strong>旅行史:</Typography.Text> 2024-01-01至2024-01-05曾前往外省某市。
                            </Typography.Paragraph>
                            <Button type="primary">
                                {/* Changed Link to pass query parameter for step 1 (epidemiology) */}
                                <Link to={`/cases/${caseData.id}/edit?step=1`}>编辑流行病学信息</Link>
                            </Button>
                        </Space>
                    </TabPane>
                    <TabPane tab="随访记录" key="3">
                        <Button type="primary" style={{ marginBottom: 16 }}>
                            <Link to={`/cases/${caseData.id}/follow-ups/new`}>新增随访记录</Link> {/* Updated link */}
                        </Button>
                        <List
                            dataSource={caseFollowUps}
                            renderItem={(item: FollowUp) => (
                                <List.Item>
                                    <Card style={{ width: '100%' }} title={`📅 ${item.date} | ${item.method} | ${item.doctor}`}>
                                        <Descriptions column={2}>
                                            <Descriptions.Item label="健康状态"><Tag color={item.healthStatus === '异常' || item.healthStatus === '恶化' ? 'red' : 'green'}>{item.healthStatus}</Tag></Descriptions.Item>
                                            <Descriptions.Item label="体温">{item.temperature}</Descriptions.Item>
                                            <Descriptions.Item label="症状" span={2}>{item.symptoms}</Descriptions.Item>
                                            <Descriptions.Item label="备注" span={2}>{item.notes}</Descriptions.Item>
                                        </Descriptions>
                                        <Space style={{ marginTop: 16, float: 'right' }}>
                                            <Link to={`/cases/${caseData.id}/follow-ups/${item.id}/edit`}>编辑</Link> {/* Updated link */}
                                        </Space>
                                    </Card>
                                </List.Item>
                            )}
                            locale={{ emptyText: <Empty description="暂无随访记录" /> }}
                        />
                    </TabPane>
                    <TabPane tab="治疗记录" key="4">
                         <Button type="primary" style={{ marginBottom: 16 }}>
                            <Link to={`/cases/${caseData.id}/treatments/new`}>新增治疗记录</Link> {/* Updated link */}
                        </Button>
                        <List
                            dataSource={caseTreatments}
                            renderItem={(item: Treatment) => (
                                <List.Item>
                                    <Card style={{ width: '100%' }} title={`🏥 ${item.hospital} | ${item.date}`}>
                                        <Descriptions column={2}>
                                            <Descriptions.Item label="治疗类型"><Tag>{item.type}</Tag></Descriptions.Item>
                                            <Descriptions.Item label="治疗结果"><Tag color={item.outcome === '治愈' || item.outcome === '好转' ? 'green' : 'red'}>{item.outcome}</Tag></Descriptions.Item>
                                            <Descriptions.Item label="诊断" span={2}>{item.diagnosis}</Descriptions.Item>
                                            <Descriptions.Item label="治疗方案" span={2}>{item.plan}</Descriptions.Item>
                                        </Descriptions>
                                        <Space style={{ marginTop: 16, float: 'right' }}>
                                            <Link to={`/cases/${caseData.id}/treatments/${item.id}/edit`}>编辑</Link> {/* Added edit link */}
                                        </Space>
                                    </Card>
                                </List.Item>
                            )}
                            locale={{ emptyText: <Empty description="暂无治疗记录" /> }}
                        />
                    </TabPane>
                    <TabPane tab="检测记录" key="5">
                        <Button type="primary" style={{ marginBottom: 16 }}>
                            <Link to={`/cases/${caseData.id}/test-records/new`}>新增检测记录</Link> {/* Updated link */}
                        </Button>
                         <List
                            dataSource={caseTestRecords}
                            renderItem={(item: TestRecord) => (
                                <List.Item>
                                    <Card style={{ width: '100%' }} title={`🧪 ${item.testType} | ${item.collectionTime}`}>
                                        <Descriptions column={2}>
                                            <Descriptions.Item label="样本类型">{item.sampleType}</Descriptions.Item>
                                            <Descriptions.Item label="检测结果"><Tag color={item.result === '阳性' ? 'red' : 'green'}>{item.result}</Tag></Descriptions.Item>
                                            <Descriptions.Item label="病原体" span={2}>{item.pathogen || 'N/A'}</Descriptions.Item>
                                            <Descriptions.Item label="检测机构" span={2}>{item.lab}</Descriptions.Item>
                                        </Descriptions>
                                        <Space style={{ marginTop: 16, float: 'right' }}>
                                            <Link to={`/cases/${caseData.id}/test-records/${item.id}/edit`}>编辑</Link> {/* Added edit link */}
                                        </Space>
                                    </Card>
                                </List.Item>
                            )}
                            locale={{ emptyText: <Empty description="暂无检测记录" /> }}
                        />
                    </TabPane>
                    <TabPane tab="追踪记录" key="6">
                        <TrajectoryMap records={caseTrackingRecords} />
                        <Button type="primary" style={{ marginTop: 16 }}>
                            <Link to={`/cases/${caseData.id}/tracking-records/new`}>新增追踪记录</Link> {/* Updated link */}
                        </Button>
                        <List
                            dataSource={caseTrackingRecords}
                            renderItem={(item: TrackingRecord) => (
                                <List.Item>
                                    <Card style={{ width: '100%' }} title={`📍 ${item.type} | ${item.date}`}>
                                        <Descriptions column={1}>
                                            <Descriptions.Item label="地点">{item.location}</Descriptions.Item>
                                            <Descriptions.Item label="描述">{item.description}</Descriptions.Item>
                                        </Descriptions>
                                        <Space style={{ marginTop: 16, float: 'right' }}>
                                            <Link to={`/cases/${caseData.id}/tracking-records/${item.id}/edit`}>编辑</Link> {/* Added edit link */}
                                        </Space>
                                    </Card>
                                </List.Item>
                            )}
                            locale={{ emptyText: <Empty description="暂无追踪记录" /> }}
                        />
                    </TabPane>
                    <TabPane tab="操作日志" key="7">
                        <Empty description="暂无操作日志" />
                    </TabPane>
                </Tabs>
            </Card>
        </Space>
    );
};

export default CaseDetail;
---

File: pages\CaseList.tsx
---
import { Button, Card, Col, DatePicker, Form, Input, Row, Select, Space, Table, Tag } from 'antd';
import type { ColumnsType } from 'antd/es/table';
import { Link } from 'react-router-dom';
import { type Case, cases } from '../data/cases';
import { diseaseCodes } from '../data/diseaseCodes'; // Import diseaseCodes

const { RangePicker } = DatePicker;
const { Option } = Select; // Destructure Option from Select

const columns: ColumnsType<Case> = [
    {
        title: '个案编号',
        dataIndex: 'caseNo',
        key: 'caseNo',
        render: (text, record) => <Link to={`/cases/${record.id}`}>{text}</Link>,
    },
    {
        title: '患者',
        dataIndex: 'patientName',
        key: 'patientName',
    },
    {
        title: '疾病类型',
        dataIndex: 'disease',
        key: 'disease',
    },
    {
        title: '报告日期',
        dataIndex: 'reportDate',
        key: 'reportDate',
        sorter: (a, b) => new Date(a.reportDate).getTime() - new Date(b.reportDate).getTime(),
    },
    {
        title: '个案状态',
        dataIndex: 'status',
        key: 'status',
        render: (status: string) => {
            let color = 'default';
            if (status === '待核实') color = 'gold';
            if (status === '处理中') color = 'blue';
            if (status === '已关闭') color = 'green';
            return <Tag color={color}>{status}</Tag>;
        },
    },
    {
        title: '操作',
        key: 'action',
        render: (_, record) => (
            <Space size="middle">
                <Link to={`/cases/${record.id}`}>查看</Link>
                <Link to={`/cases/${record.id}/edit`}>编辑</Link> {/* Updated link */}
                <Link to="#">推送</Link>
            </Space>
        ),
    },
];

const CaseList = () => {
    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Card>
                <Form layout="vertical">
                    <Row gutter={16}>
                        <Col span={8}>
                            <Form.Item label="个案编号">
                                <Input placeholder="请输入" />
                            </Form.Item>
                        </Col>
                        <Col span={8}>
                            <Form.Item label="患者姓名">
                                <Input placeholder="请输入" />
                            </Form.Item>
                        </Col>
                        <Col span={8}>
                            <Form.Item label="疾病类型">
                                <Select placeholder="请选择">
                                    {diseaseCodes.map(disease => (
                                        <Option key={disease.id} value={disease.diseaseName}>
                                            {disease.diseaseName}
                                        </Option>
                                    ))}
                                </Select>
                            </Form.Item>
                        </Col>
                        <Col span={8}>
                            <Form.Item label="报告日期">
                                <RangePicker style={{ width: '100%' }} />
                            </Form.Item>
                        </Col>
                        <Col span={8}>
                            <Form.Item label="个案状态">
                                <Select placeholder="请选择">
                                    <Option value="待核实">待核实</Option>
                                    <Option value="处理中">处理中</Option>
                                    <Option value="已关闭">已关闭</Option>
                                </Select>
                            </Form.Item>
                        </Col>
                    </Row>
                    <Row>
                        <Col span={24} style={{ textAlign: 'right' }}>
                            <Space>
                                <Button type="primary">查询</Button>
                                <Button>重置</Button>
                            </Space>
                        </Col>
                    </Row>
                </Form>
            </Card>

            <Card>
                <Space style={{ marginBottom: 16 }}>
                    <Button type="primary">
                        <Link to="/cases/new">新增个案</Link>
                    </Button>
                    <Button>批量导入</Button>
                    <Button>导出Excel</Button>
                </Space>
                <Table
                    columns={columns}
                    dataSource={cases}
                    rowKey="id"
                    pagination={{
                        total: cases.length,
                        showTotal: total => `共 ${total} 条`,
                        showSizeChanger: true,
                        showQuickJumper: true,
                    }}
                />
            </Card>
        </Space>
    );
};

export default CaseList;
---

File: pages\Dashboard.tsx
---
import { ArrowUpOutlined } from '@ant-design/icons';
import { Card, Col, Row, Statistic, List, Space, Typography, Button, Divider } from 'antd';
import { Link } from 'react-router-dom';
import { metrics, todoItems, recentVisits, quickAccess } from '../data/dashboard';

const { Title, Text } = Typography;

const Dashboard = () => {
    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Row gutter={[16, 16]}>
                {metrics.map((metric, index) => (
                    <Col xs={24} sm={12} md={6} key={index}>
                        <Card>
                            <Statistic
                                title={metric.title}
                                value={metric.value}
                                precision={0}
                                valueStyle={metric.trend ? { color: '#3f8600' } : {}}
                                prefix={metric.trend ? <ArrowUpOutlined /> : null}
                                suffix={metric.unit}
                            />
                            {metric.link && <Link to={metric.link} style={{ marginTop: '10px', display: 'block' }}>查看</Link>}
                        </Card>
                    </Col>
                ))}
            </Row>

            <Card title="待办事项">
                <List
                    itemLayout="vertical"
                    dataSource={todoItems}
                    renderItem={item => (
                        <List.Item key={item.id}>
                            <List.Item.Meta
                                title={`${item.category} (${item.count})`}
                            />
                            <List
                                size="small"
                                dataSource={item.items.slice(0, 3)}
                                renderItem={subItem => <List.Item>{subItem}</List.Item>}
                            />
                        </List.Item>
                    )}
                />
            </Card>

            <Row gutter={[16, 16]}>
                <Col xs={24} md={12}>
                    <Card>
                        <Title level={5}>最近访问</Title>
                        <List
                            dataSource={recentVisits}
                            renderItem={item => (
                                <List.Item>
                                    <Link to={item.link}>{item.name}</Link>
                                </List.Item>
                            )}
                        />
                    </Card>
                </Col>
                <Col xs={24} md={12}>
                    <Card>
                        <Title level={5}>快捷入口</Title>
                        <Space wrap>
                            {quickAccess.map(item => (
                                <Button key={item.id} type="primary" ghost>
                                    <Link to={item.link}>{item.name}</Link>
                                </Button>
                            ))}
                        </Space>
                    </Card>
                </Col>
            </Row>
        </Space>
    );
};

export default Dashboard;
---

File: pages\DiseaseCodeList.tsx
---
import { Button, Card, Col, Input, Row, Select, Space, Table, Tag } from 'antd';
import type { ColumnsType } from 'antd/es/table';
import { type DiseaseCode, diseaseCodes } from '../data/diseaseCodes';
import { Link } from 'react-router-dom'; // Import Link

const columns: ColumnsType<DiseaseCode> = [
    {
        title: '疾病名称',
        dataIndex: 'diseaseName',
        key: 'diseaseName',
    },
    {
        title: '疾病编码',
        dataIndex: 'diseaseCode',
        key: 'diseaseCode',
    },
    {
        title: 'ICD-10',
        dataIndex: 'icd10',
        key: 'icd10',
    },
    {
        title: '分类',
        dataIndex: 'category',
        key: 'category',
        render: (category: string) => {
            let color = 'blue';
            if (category === '甲类') color = 'red';
            if (category === '乙类') color = 'orange';
            if (category === '丙类') color = 'green';
            return <Tag color={color}>{category}</Tag>;
        },
    },
    {
        title: '风险等级',
        dataIndex: 'riskLevel',
        key: 'riskLevel',
        render: (level: string) => {
            let color = 'default';
            if (level === '高') color = 'red';
            if (level === '中') color = 'orange';
            if (level === '低') color = 'green';
            return <Tag color={color}>{level}</Tag>;
        },
    },
    {
        title: '操作',
        key: 'action',
        render: (_, record) => (
            <Space size="middle">
                <Link to={`/disease-codes/${record.id}/edit`}>编辑</Link> {/* Updated link */}
                <a>删除</a>
            </Space>
        ),
    },
];

const DiseaseCodeList = () => {
    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Card>
                <Row gutter={16} justify="space-between" align="middle">
                    <Col>
                        <Space>
                            <Button type="primary">
                                <Link to="/disease-codes/new">新增编码</Link> {/* Updated link */}
                            </Button>
                            <Button>导入</Button>
                            <Button>导出</Button>
                        </Space>
                    </Col>
                    <Col>
                        <Space>
                            <Input placeholder="搜索疾病名称/编码" />
                            <Select placeholder="分类" style={{ width: 120 }} />
                            <Button type="primary">搜索</Button>
                        </Space>
                    </Col>
                </Row>
            </Card>

            <Card>
                <Table
                    columns={columns}
                    dataSource={diseaseCodes}
                    rowKey="id"
                    pagination={{
                        total: diseaseCodes.length,
                        showTotal: total => `共 ${total} 条`,
                    }}
                />
            </Card>
        </Space>
    );
};

export default DiseaseCodeList;
---

File: pages\EditRecordPage.tsx
---
import { Card, Space, Typography, Button } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';

const { Title, Text } = Typography;

const EditRecordPage = () => {
    const { type, id } = useParams<{ type: string; id: string }>();
    const navigate = useNavigate();

    const getTitle = (recordType: string | undefined) => {
        switch (recordType) {
            case 'case': return '编辑个案';
            case 'follow-up': return '编辑随访记录';
            case 'treatment': return '编辑治疗记录';
            case 'test-record': return '编辑检测记录';
            case 'tracking-record': return '编辑追踪记录';
            case 'unknown-case': return '编辑不明原因病例';
            case 'disease-code': return '编辑疾病编码';
            case 'pathogen': return '编辑病原体';
            default: return '编辑记录';
        }
    };

    const getReturnPath = (recordType: string | undefined, recordId: string | undefined) => {
        switch (recordType) {
            case 'case': return `/cases/${recordId}`;
            case 'unknown-case': return `/unknown-cases/${recordId}`;
            case 'follow-up':
            case 'treatment':
            case 'test-record':
            case 'tracking-record':
                // For sub-records, we need the parent case ID.
                // This generic page doesn't have it easily. For now, redirect to the main case list.
                // In a real app, the parent ID would be passed in the URL (e.g., /cases/:caseId/follow-ups/:id/edit)
                // and we would navigate back to /cases/:caseId
                return '/cases'; 
            case 'disease-code': return '/disease-codes';
            case 'pathogen': return '/pathogens';
            default: return '/';
        }
    }

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Card>
                <Title level={4}>{getTitle(type)}</Title>
                <Text>这是一个模拟的 {getTitle(type)} 页面。</Text>
                <p>您正在编辑 ID 为 <Text strong>{id}</Text> 的记录。</p>
                <Button type="primary" onClick={() => navigate(getReturnPath(type, id))}>返回详情/列表</Button>
            </Card>
        </Space>
    );
};

export default EditRecordPage;
---

File: pages\NewCase.tsx
---
import { useState } from 'react';
import { Steps, Button, Card, Space, message, Row, Col, Typography, Form } from 'antd'; // Import Form
import { useNavigate } from 'react-router-dom';
import Step1Form from '../components/NewCase/Step1Form';
import Step2Form from '../components/NewCase/Step2Form';
import Step3Form from '../components/NewCase/Step3Form';
import Step4Confirm from '../components/NewCase/Step4Confirm';
import moment from 'moment'; // Import moment for date handling

const { Step } = Steps;
const { Title } = Typography;

const steps = [
    { title: '基本信息', content: (form: any) => <Step1Form form={form} /> }, // Pass form instance
    { title: '流行病学', content: (form: any) => <Step2Form form={form} /> }, // Pass form instance
    { title: '诊断信息', content: (form: any) => <Step3Form form={form} /> }, // Pass form instance
    { title: '确认提交', content: (form: any) => <Step4Confirm form={form} /> }, // Pass form instance
];

const NewCase = () => {
    const [current, setCurrent] = useState(0);
    const [form] = Form.useForm(); // Initialize form instance
    const navigate = useNavigate();

    // Initial values for the form, including pre-filled report info
    const initialValues = {
        reportUnit: '北京市朝阳区疾控中心',
        reporter: '李医生',
        reportDate: moment(), // Current date
    };

    const next = async () => {
        try {
            // Validate current step's fields
            await form.validateFields();
            setCurrent(current + 1);
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请填写完整当前步骤的必填项！');
        }
    };

    const prev = () => {
        setCurrent(current - 1);
    };
    
    const handleSubmit = async () => {
        try {
            await form.validateFields(); // Validate all fields one last time
            const values = form.getFieldsValue(true); // Get all form values, including untouched
            // Process form values before submission, e.g., format dates
            const formattedValues = {
                ...values,
                reportDate: values.reportDate ? values.reportDate.format('YYYY-MM-DD') : undefined,
                symptomOnsetDate: values.symptomOnsetDate ? values.symptomOnsetDate.format('YYYY-MM-DD') : undefined,
                dob: values.dob ? values.dob.format('YYYY-MM-DD') : undefined,
                contactDate: values.contactDate ? values.contactDate.format('YYYY-MM-DD') : undefined,
                travelStartDate: values.travelStartDate ? values.travelStartDate.format('YYYY-MM-DD') : undefined,
                travelEndDate: values.travelEndDate ? values.travelEndDate.format('YYYY-MM-DD') : undefined,
                diagnosisDate: values.diagnosisDate ? values.diagnosisDate.format('YYYY-MM-DD') : undefined,
            };
            console.log('Form submitted:', formattedValues);
            message.success('个案创建成功!');
            navigate('/cases');
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('提交失败，请检查所有必填项！');
        }
    };

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Row justify="space-between" align="middle">
                <Col>
                    <Title level={4} style={{ margin: 0 }}>新增个案调查表</Title>
                </Col>
                <Col>
                    <Space>
                        <Button key="2">保存草稿</Button>
                        <Button key="1" onClick={() => navigate('/cases')}>取消</Button>
                    </Space>
                </Col>
            </Row>
            <Card>
                <Steps current={current}>
                    {steps.map(item => (
                        <Step key={item.title} title={item.title} />
                    ))}
                </Steps>
                <div style={{ marginTop: 24, minHeight: 400 }}>
                    {/* Pass the form instance to the current step's content */}
                    <Form form={form} layout="vertical" initialValues={initialValues}>
                        {steps[current].content(form)}
                    </Form>
                </div>
                <div style={{ marginTop: 24, textAlign: 'center' }}>
                    <Space>
                        {current > 0 && (
                            <Button style={{ margin: '0 8px' }} onClick={() => prev()}>
                                上一步
                            </Button>
                        )}
                        {current < steps.length - 1 && (
                            <Button type="primary" onClick={() => next()}>
                                下一步
                            </Button>
                        )}
                        {current === steps.length - 1 && (
                            <Button type="primary" onClick={handleSubmit}>
                                提交
                            </Button>
                        )}
                    </Space>
                </div>
            </Card>
        </Space>
    );
};

export default NewCase;
---

File: pages\NewRecordPage.tsx
---
import { Card, Space, Typography, Button } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';

const { Title, Text } = Typography;

const NewRecordPage = () => {
    const { type } = useParams<{ type: string }>();
    const navigate = useNavigate();

    const getTitle = (recordType: string | undefined) => {
        switch (recordType) {
            case 'case': return '新增个案';
            case 'follow-up': return '新增随访记录';
            case 'treatment': return '新增治疗记录';
            case 'test-record': return '新增检测记录';
            case 'tracking-record': return '新增追踪记录';
            case 'unknown-case': return '新增不明原因病例';
            case 'disease-code': return '新增疾病编码';
            case 'pathogen': return '新增病原体';
            default: return '新增记录';
        }
    };

    const getReturnPath = (recordType: string | undefined) => {
        switch (recordType) {
            case 'case':
            case 'unknown-case':
                return `/${recordType}s`;
            case 'follow-up':
            case 'treatment':
            case 'test-record':
            case 'tracking-record':
                // For sub-records, we need to know the parent case ID.
                // This generic page doesn't have it, so we'll just go to cases list for now.
                // In a real app, the parent ID would be passed or derived.
                return '/cases'; 
            case 'disease-code': return '/disease-codes';
            case 'pathogen': return '/pathogens';
            default: return '/';
        }
    }

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Card>
                <Title level={4}>{getTitle(type)}</Title>
                <Text>这是一个模拟的 {getTitle(type)} 页面。</Text>
                <p>在这里可以填写表单来创建新的 {getTitle(type).replace('新增', '')}。</p>
                <Button type="primary" onClick={() => navigate(getReturnPath(type))}>返回列表</Button>
            </Card>
        </Space>
    );
};

export default NewRecordPage;
---

File: pages\PathogenList.tsx
---
import { Button, Card, Col, Input, Row, Select, Space, Table, Tag } from 'antd';
import type { ColumnsType } from 'antd/es/table';
import { type Pathogen, pathogens } from '../data/pathogens';
import { Link } from 'react-router-dom'; // Import Link

const columns: ColumnsType<Pathogen> = [
    {
        title: '病原体名称',
        dataIndex: 'name',
        key: 'name',
    },
    {
        title: '病原体编码',
        dataIndex: 'code',
        key: 'code',
    },
    {
        title: '学名',
        dataIndex: 'scientificName',
        key: 'scientificName',
    },
    {
        title: '类型',
        dataIndex: 'type',
        key: 'type',
    },
    {
        title: '生物安全等级',
        dataIndex: 'bsl',
        key: 'bsl',
        render: (bsl: string) => {
            let color = 'default';
            if (bsl === 'BSL-4') color = 'red';
            if (bsl === 'BSL-3') color = 'orange';
            if (bsl === 'BSL-2') color = 'gold';
            if (bsl === 'BSL-1') color = 'green';
            return <Tag color={color}>{bsl}</Tag>;
        },
    },
    {
        title: '操作',
        key: 'action',
        render: (_, record) => (
            <Space size="middle">
                <Link to={`/pathogens/${record.id}/edit`}>编辑</Link> {/* Updated link */}
                <a>关联疾病</a>
            </Space>
        ),
    },
];

const PathogenList = () => {
    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Card>
                <Row gutter={16} justify="space-between" align="middle">
                    <Col>
                        <Space>
                            <Button type="primary">
                                <Link to="/pathogens/new">新增病原体</Link> {/* Updated link */}
                            </Button>
                            <Button>导入</Button>
                        </Space>
                    </Col>
                    <Col>
                        <Space>
                            <Input placeholder="搜索病原体名称/编码" />
                            <Select placeholder="类型" style={{ width: 120 }} />
                            <Button type="primary">搜索</Button>
                        </Space>
                    </Col>
                </Row>
            </Card>

            <Card>
                <Table
                    columns={columns}
                    dataSource={pathogens}
                    rowKey="id"
                    pagination={{
                        total: pathogens.length,
                        showTotal: total => `共 ${total} 条`,
                    }}
                />
            </Card>
        </Space>
    );
};

export default PathogenList;
---

File: pages\Statistics.tsx
---
import { Card, Col, DatePicker, Form, Row, Select, Space, Button, Checkbox, Radio } from 'antd';
import { Line } from '@ant-design/charts';

const { RangePicker } = DatePicker;

const data = [
    { date: '01-01', value: 7, disease: '新冠肺炎' },
    { date: '01-02', value: 9, disease: '新冠肺炎' },
    { date: '01-03', value: 10, disease: '新冠肺炎' },
    { date: '01-04', value: 8, disease: '新冠肺炎' },
    { date: '01-15', value: 18, disease: '新冠肺炎' },
    { date: '01-22', value: 15, disease: '新冠肺炎' },
    { date: '01-29', value: 12, disease: '新冠肺炎' },
    { date: '01-01', value: 2, disease: '霍乱' },
    { date: '01-02', value: 3, disease: '霍乱' },
    { date: '01-03', value: 2, disease: '霍乱' },
    { date: '01-04', value: 1, disease: '霍乱' },
    { date: '01-15', value: 5, disease: '霍乱' },
    { date: '01-22', value: 4, disease: '霍乱' },
    { date: '01-29', value: 3, disease: '霍乱' },
];

const config = {
    data,
    xField: 'date',
    yField: 'value',
    seriesField: 'disease',
    legend: {
        position: 'top' as const,
    },
    smooth: true,
    animation: {
        appear: {
            animation: 'path-in' as const,
            duration: 5000,
        },
    },
};

const Statistics = () => {
    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Card>
                <Form layout="vertical">
                    <Row gutter={16}>
                        <Col span={12}>
                            <Form.Item label="时间范围">
                                <RangePicker style={{ width: '100%' }} />
                            </Form.Item>
                        </Col>
                        <Col span={12}>
                            <Form.Item label="地区范围">
                                <Select placeholder="请选择地区" />
                            </Form.Item>
                        </Col>
                        <Col span={24}>
                            <Form.Item label="疾病类别">
                                <Checkbox.Group>
                                    <Checkbox value="新冠肺炎">新冠肺炎</Checkbox>
                                    <Checkbox value="霍乱">霍乱</Checkbox>
                                    <Checkbox value="鼠疫">鼠疫</Checkbox>
                                </Checkbox.Group>
                            </Form.Item>
                        </Col>
                        <Col span={24}>
                             <Form.Item label="统计维度">
                                <Radio.Group defaultValue="day">
                                    <Radio.Button value="day">按日</Radio.Button>
                                    <Radio.Button value="week">按周</Radio.Button>
                                    <Radio.Button value="month">按月</Radio.Button>
                                </Radio.Group>
                            </Form.Item>
                        </Col>
                    </Row>
                    <Row>
                        <Col span={24} style={{ textAlign: 'right' }}>
                            <Space>
                                <Button type="primary">查询</Button>
                                <Button>重置</Button>
                            </Space>
                        </Col>
                    </Row>
                </Form>
            </Card>

            <Card
                title="疾病趋势图"
                extra={
                    <Space>
                        <Button>导出Excel</Button>
                        <Button>导出图片</Button>
                    </Space>
                }
            >
                <Line {...config} />
            </Card>
        </Space>
    );
};

export default Statistics;
---

File: pages\UnknownCaseDetail.tsx
---
import { useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import { Card, Descriptions, Tabs, Tag, Space, Button, Empty, List, Typography } from 'antd';
import { type UnknownCase, unknownCases } from '../data/unknownCases';
import { type TestRecord, testRecords } from '../data/testRecords'; // Import test records
import PushCaseFlow from '../components/PushCaseFlow';

const { TabPane } = Tabs;

const UnknownCaseDetail = () => {
    const { id } = useParams<{ id: string }>();
    const [isPushModalVisible, setIsPushModalVisible] = useState(false);
    const caseData = unknownCases.find(c => c.id === id);
    const unknownCaseTestRecords = testRecords.filter(tr => tr.unknownCaseId === id); // Filter test records for this unknown case

    if (!caseData) {
        return <Empty description="未找到病例信息" />;
    }

    const getStatusTag = (status: string) => {
        let color = 'default';
        if (status === '待检测') color = 'gold';
        if (status === '检测中') color = 'blue';
        if (status === '已确诊') color = 'success';
        if (status === '已排除') color = 'default';
        if (status === '已推送') color = 'purple';
        return <Tag color={color}>{status}</Tag>;
    };

    const getUrgencyTag = (urgency: string) => {
        let color = 'default';
        if (urgency === '高') color = 'red';
        if (urgency === '中') color = 'orange';
        if (urgency === '低') color = 'green';
        return <Tag color={color}>{urgency}</Tag>;
    };

    return (
        <>
            <Space direction="vertical" size="large" style={{ width: '100%' }}>
                <Card>
                    <Descriptions title={`病例编号: ${caseData.caseNo}`} bordered column={2}
                        extra={
                            <Space>
                                {caseData.status !== '已推送' && 
                                    <Button type="primary"><Link to={`/unknown-cases/${caseData.id}/edit`}>编辑</Link></Button> /* Updated link */
                                }
                                {caseData.status === '已确诊' && <Button type="primary" danger onClick={() => setIsPushModalVisible(true)}>推送至个案管理</Button>}
                                <Button><Link to="/unknown-cases">返回列表</Link></Button>
                            </Space>
                        }
                    >
                        <Descriptions.Item label="患者姓名">{caseData.patientName}</Descriptions.Item>
                        <Descriptions.Item label="病例状态">{getStatusTag(caseData.status)}</Descriptions.Item>
                        <Descriptions.Item label="紧急度">{getUrgencyTag(caseData.urgency)}</Descriptions.Item>
                        <Descriptions.Item label="报告日期">{caseData.reportDate}</Descriptions.Item>
                        {caseData.confirmedDisease && <Descriptions.Item label="确诊疾病">{caseData.confirmedDisease}</Descriptions.Item>}
                    </Descriptions>
                </Card>
                <Card>
                    <Tabs defaultActiveKey="1">
                        <TabPane tab="基本信息" key="1">
                            <Descriptions title="患者基本信息" bordered column={2}>
                                <Descriptions.Item label="姓名">{caseData.patientName}</Descriptions.Item>
                                <Descriptions.Item label="性别">{caseData.gender}</Descriptions.Item>
                                <Descriptions.Item label="年龄">{caseData.age}</Descriptions.Item>
                            </Descriptions>
                        </TabPane>
                        <TabPane tab="临床症状" key="2">
                            <Space direction="vertical" style={{ width: '100%' }}>
                                <p>{caseData.symptoms}</p>
                                <Button type="primary">
                                    <Link to={`/unknown-cases/${caseData.id}/edit`}>编辑临床症状</Link>
                                </Button>
                            </Space>
                        </TabPane>
                        <TabPane tab="检测记录" key="3">
                            <Button type="primary" style={{ marginBottom: 16 }}>
                                <Link to={`/unknown-cases/${caseData.id}/test-records/new`}>新增检测记录</Link>
                            </Button>
                            <List
                                dataSource={unknownCaseTestRecords}
                                renderItem={(item: TestRecord) => (
                                    <List.Item>
                                        <Card style={{ width: '100%' }} title={`🧪 ${item.testType} | ${item.collectionTime}`}>
                                            <Descriptions column={2}>
                                                <Descriptions.Item label="样本类型">{item.sampleType}</Descriptions.Item>
                                                <Descriptions.Item label="检测结果"><Tag color={item.result === '阳性' ? 'red' : 'green'}>{item.result}</Tag></Descriptions.Item>
                                                <Descriptions.Item label="病原体" span={2}>{item.pathogen || 'N/A'}</Descriptions.Item>
                                                <Descriptions.Item label="检测机构" span={2}>{item.lab}</Descriptions.Item>
                                            </Descriptions>
                                            <Space style={{ marginTop: 16, float: 'right' }}>
                                                <Link to={`/unknown-cases/${caseData.id}/test-records/${item.id}/edit`}>编辑</Link>
                                            </Space>
                                        </Card>
                                    </List.Item>
                                )}
                                locale={{ emptyText: <Empty description="暂无检测记录" /> }}
                            />
                        </TabPane>
                        <TabPane tab="推送记录" key="4">
                            <Empty description="暂无推送记录" />
                        </TabPane>
                    </Tabs>
                </Card>
            </Space>
            <PushCaseFlow
                visible={isPushModalVisible}
                onClose={() => setIsPushModalVisible(false)}
                caseData={caseData}
            />
        </>
    );
};

export default UnknownCaseDetail;
---

File: pages\UnknownCaseList.tsx
---
import { Button, Card, Col, DatePicker, Form, Input, Row, Select, Space, Table, Tag } from 'antd';
import type { ColumnsType } from 'antd/es/table';
import { Link } from 'react-router-dom';
import { type UnknownCase, unknownCases } from '../data/unknownCases';

const { RangePicker } = DatePicker;

const columns: ColumnsType<UnknownCase> = [
    {
        title: '病例编号',
        dataIndex: 'caseNo',
        key: 'caseNo',
        render: (text, record) => <Link to={`/unknown-cases/${record.id}`}>{text}</Link>,
    },
    {
        title: '患者',
        dataIndex: 'patientName',
        key: 'patientName',
    },
    {
        title: '报告日期',
        dataIndex: 'reportDate',
        key: 'reportDate',
        sorter: (a, b) => new Date(a.reportDate).getTime() - new Date(b.reportDate).getTime(),
    },
    {
        title: '病例状态',
        dataIndex: 'status',
        key: 'status',
        render: (status: string) => {
            let color = 'default';
            if (status === '待检测') color = 'gold';
            if (status === '检测中') color = 'blue';
            if (status === '已确诊') color = 'success';
            if (status === '已排除') color = 'default';
            if (status === '已推送') color = 'purple';
            return <Tag color={color}>{status}</Tag>;
        },
    },
    {
        title: '紧急度',
        dataIndex: 'urgency',
        key: 'urgency',
        render: (urgency: string) => {
            let color = 'default';
            if (urgency === '高') color = 'red';
            if (urgency === '中') color = 'orange';
            if (urgency === '低') color = 'green';
            return <Tag color={color}>{urgency}</Tag>;
        },
    },
    {
        title: '操作',
        key: 'action',
        render: (_, record) => (
            <Space size="middle">
                <Link to={`/unknown-cases/${record.id}`}>查看</Link>
                {record.status !== '已推送' && record.status !== '已排除' && 
                    <Link to={`/unknown-cases/${record.id}/edit`}>编辑</Link> /* Updated link */
                }
                {record.status === '已确诊' && <Link to={`/unknown-cases/${record.id}`}>推送</Link>}
            </Space>
        ),
    },
];

const UnknownCaseList = () => {
    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Card>
                <Form layout="vertical">
                    <Row gutter={16}>
                        <Col span={8}>
                            <Form.Item label="病例编号">
                                <Input placeholder="请输入" />
                            </Form.Item>
                        </Col>
                        <Col span={8}>
                            <Form.Item label="患者姓名">
                                <Input placeholder="请输入" />
                            </Form.Item>
                        </Col>
                        <Col span={8}>
                            <Form.Item label="病例状态">
                                <Select placeholder="请选择" />
                            </Form.Item>
                        </Col>
                    </Row>
                    <Row>
                        <Col span={24} style={{ textAlign: 'right' }}>
                            <Space>
                                <Button type="primary">查询</Button>
                                <Button>重置</Button>
                            </Space>
                        </Col>
                    </Row>
                </Form>
            </Card>

            <Card>
                <Space style={{ marginBottom: 16 }}>
                    <Button type="primary">
                        <Link to="/unknown-cases/new">新增病例</Link> {/* Updated link */}
                    </Button>
                    <Button>导出Excel</Button>
                </Space>
                <Table
                    columns={columns}
                    dataSource={unknownCases}
                    rowKey="id"
                    pagination={{
                        total: unknownCases.length,
                        showTotal: total => `共 ${total} 条`,
                        showSizeChanger: true,
                        showQuickJumper: true,
                    }}
                />
            </Card>
        </Space>
    );
};

export default UnknownCaseList;
---

File: pages\records\EditCase.tsx
---
import { useState, useEffect } from 'react';
import { Steps, Button, Card, Space, message, Row, Col, Typography, Form, Spin } from 'antd';
import { useNavigate, useParams, useLocation } from 'react-router-dom'; // Import useLocation
import Step1Form from '../../components/NewCase/Step1Form';
import Step2Form from '../../components/NewCase/Step2Form';
import Step3Form from '../../components/NewCase/Step3Form';
import Step4Confirm from '../../components/NewCase/Step4Confirm';
import moment from 'moment';
import type { CaseFormData } from '../../types/forms';
import { cases } from '../../data/cases'; // Mock data

const { Step } = Steps;
const { Title } = Typography;

const steps = [
    { title: '基本信息', content: (form: any) => <Step1Form form={form} /> },
    { title: '流行病学', content: (form: any) => <Step2Form form={form} /> },
    { title: '诊断信息', content: (form: any) => <Step3Form form={form} /> },
    { title: '确认提交', content: (form: any) => <Step4Confirm form={form} /> },
];

const EditCase = () => {
    const { id } = useParams<{ id: string }>();
    const location = useLocation(); // Get location object to read query params
    const navigate = useNavigate();
    const [form] = Form.useForm<CaseFormData>();
    const [loading, setLoading] = useState(true);

    // Initialize current step based on URL query parameter, default to 0
    const initialStep = new URLSearchParams(location.search).get('step');
    const [current, setCurrent] = useState(initialStep ? parseInt(initialStep, 10) : 0);

    useEffect(() => {
        if (id) {
            const caseData = cases.find(c => c.id === id);
            if (caseData) {
                // Mocking epidemiological and diagnostic data based on the limited Case interface
                const initialValues: CaseFormData = {
                    ...caseData,
                    gender: caseData.gender === '男' ? 'male' : 'female',
                    reportDate: moment(caseData.reportDate),
                    symptomOnsetDate: moment(caseData.symptomOnsetDate),
                    diagnosisDate: moment(caseData.diagnosisDate),
                    dob: moment(caseData.reportDate).subtract(caseData.age, 'years'), // Mock DOB
                    diseaseId: '3', // Mock diseaseId for新冠肺炎
                    hasExposure: true, // Mock
                    exposureHistory: '曾到疫区出差', // Mock
                    hasContact: false, // Mock
                    hasTravel: true, // Mock
                    travelStartDate: moment('2024-01-01'), // Mock
                    travelEndDate: moment('2024-01-05'), // Mock
                    travelDestination: '外省某市', // Mock
                    travelHistory: '乘坐高铁往返', // Mock
                    initialDiagnosis: caseData.diagnosis,
                    caseSource: 'active', // Mock
                    symptoms: ['fever', 'cough'], // Mock
                };
                form.setFieldsValue(initialValues);
            } else {
                message.error('未找到该个案信息。');
                navigate('/cases');
            }
            setLoading(false);
        } else {
            message.error('缺少个案ID，无法编辑。');
            navigate('/cases');
        }
    }, [id, navigate, form]); // Removed `current` from dependencies to prevent re-rendering loop

    const next = async () => {
        try {
            await form.validateFields();
            setCurrent(current + 1);
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请填写完整当前步骤的必填项！');
        }
    };

    const prev = () => {
        setCurrent(current - 1);
    };

    const handleSubmit = async () => {
        try {
            await form.validateFields();
            const values = form.getFieldsValue(true);
            const formattedValues = {
                ...values,
                reportDate: values.reportDate ? values.reportDate.format('YYYY-MM-DD') : undefined,
                symptomOnsetDate: values.symptomOnsetDate ? values.symptomOnsetDate.format('YYYY-MM-DD') : undefined,
                dob: values.dob ? values.dob.format('YYYY-MM-DD') : undefined,
                contactDate: values.contactDate ? values.contactDate.format('YYYY-MM-DD') : undefined,
                travelStartDate: values.travelStartDate ? values.travelStartDate.format('YYYY-MM-DD') : undefined,
                travelEndDate: values.travelEndDate ? values.travelEndDate.format('YYYY-MM-DD') : undefined,
                diagnosisDate: values.diagnosisDate ? values.diagnosisDate.format('YYYY-MM-DD') : undefined,
            };
            console.log('Form updated:', formattedValues);
            message.success('个案更新成功!');
            navigate(`/cases/${id}`);
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('提交失败，请检查所有必填项！');
        }
    };

    if (loading) {
        return <Spin size="large" style={{ display: 'block', margin: '50px auto' }} />;
    }

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <Row justify="space-between" align="middle">
                <Col>
                    <Title level={4} style={{ margin: 0 }}>编辑个案调查表 - {id}</Title>
                </Col>
                <Col>
                    <Space>
                        <Button key="2">保存草稿</Button>
                        <Button key="1" onClick={() => navigate(`/cases/${id}`)}>取消</Button>
                    </Space>
                </Col>
            </Row>
            <Card>
                <Steps current={current}>
                    {steps.map(item => (
                        <Step key={item.title} title={item.title} />
                    ))}
                </Steps>
                <div style={{ marginTop: 24, minHeight: 400 }}>
                    <Form form={form} layout="vertical">
                        {steps[current].content(form)}
                    </Form>
                </div>
                <div style={{ marginTop: 24, textAlign: 'center' }}>
                    <Space>
                        {current > 0 && (
                            <Button style={{ margin: '0 8px' }} onClick={() => prev()}>
                                上一步
                            </Button>
                        )}
                        {current < steps.length - 1 && (
                            <Button type="primary" onClick={() => next()}>
                                下一步
                            </Button>
                        )}
                        {current === steps.length - 1 && (
                            <Button type="primary" onClick={handleSubmit}>
                                提交更新
                            </Button>
                        )}
                    </Space>
                </div>
            </Card>
        </Space>
    );
};

export default EditCase;
---

File: pages\records\EditDiseaseCode.tsx
---
import { useState, useEffect } from 'react';
import { Form, Button, Space, message, Spin } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import DiseaseCodeForm from '../../components/forms/DiseaseCodeForm';
import type { DiseaseCodeFormData } from '../../types/forms';
import { diseaseCodes } from '../../data/diseaseCodes'; // Mock data

const EditDiseaseCode = () => {
    const [form] = Form.useForm<DiseaseCodeFormData>();
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>();
    const [loading, setLoading] = useState(true);
    const [initialData, setInitialData] = useState<DiseaseCodeFormData | undefined>(undefined);

    useEffect(() => {
        if (id) {
            // Simulate fetching data
            const record = diseaseCodes.find(dc => dc.id === id);
            if (record) {
                setInitialData({
                    ...record,
                    // Mock relatedPathogens if needed, based on existing data
                    relatedPathogens: ['p1', 'p2'], // Example mock
                });
                form.setFieldsValue({
                    ...record,
                    relatedPathogens: ['p1', 'p2'],
                });
            } else {
                message.error('未找到该疾病编码。');
                navigate('/disease-codes');
            }
            setLoading(false);
        } else {
            message.error('缺少必要的ID，无法编辑疾病编码。');
            navigate('/disease-codes');
        }
    }, [id, navigate, form]);

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('Updated Disease Code Data:', values);
            message.success('疾病编码更新成功!');
            navigate('/disease-codes'); // Navigate back to list
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate('/disease-codes'); // Navigate back to list
    };

    if (loading) {
        return <Spin size="large" style={{ display: 'block', margin: '50px auto' }} />;
    }

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <DiseaseCodeForm form={form} initialValues={initialData} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default EditDiseaseCode;
---

File: pages\records\EditFollowUp.tsx
---
import { useState, useEffect } from 'react';
import { Form, Button, Space, message, Spin } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import FollowUpForm from '../../components/forms/FollowUpForm';
import type { FollowUpFormData } from '../../types/forms';
import { followUps } from '../../data/followUps'; // Mock data
import moment from 'moment';

const EditFollowUp = () => {
    const [form] = Form.useForm<FollowUpFormData>();
    const navigate = useNavigate();
    const { caseId, unknownCaseId, id } = useParams<{ caseId?: string; unknownCaseId?: string; id: string }>();
    const [loading, setLoading] = useState(true);
    const [initialData, setInitialData] = useState<FollowUpFormData | undefined>(undefined);

    const parentId = caseId || unknownCaseId;
    const parentType = caseId ? 'case' : 'unknownCase';

    useEffect(() => {
        if (id && parentId) {
            // Simulate fetching data
            const record = followUps.find(fu => fu.id === id && (fu.caseId === caseId || fu.caseId === unknownCaseId));
            if (record) {
                setInitialData({
                    ...record,
                    followUpDate: moment(record.date), // Use 'date' for followUpDate
                    nextFollowUpDate: record.nextFollowUpDate ? moment(record.nextFollowUpDate) : undefined,
                });
                form.setFieldsValue({
                    ...record,
                    followUpDate: moment(record.date),
                    nextFollowUpDate: record.nextFollowUpDate ? moment(record.nextFollowUpDate) : undefined,
                });
            } else {
                message.error('未找到该随访记录。');
                navigate(`/cases/${caseId || unknownCaseId}`);
            }
            setLoading(false);
        } else {
            message.error('缺少必要的ID，无法编辑随访记录。');
            navigate('/cases');
        }
    }, [id, caseId, unknownCaseId, navigate, form, parentId]);

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('Updated Follow-Up Data:', values);
            message.success('随访记录更新成功!');
            navigate(`/cases/${caseId}`); // Navigate back to case detail
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate(`/cases/${caseId}`); // Navigate back to case detail
    };

    if (loading) {
        return <Spin size="large" style={{ display: 'block', margin: '50px auto' }} />;
    }

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <FollowUpForm form={form} initialValues={initialData} parentType={parentType} parentId={parentId!} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default EditFollowUp;
---

File: pages\records\EditPathogen.tsx
---
import { useState, useEffect } from 'react';
import { Form, Button, Space, message, Spin } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import PathogenForm from '../../components/forms/PathogenForm';
import type { PathogenFormData } from '../../types/forms';
import { pathogens } from '../../data/pathogens'; // Mock data

const EditPathogen = () => {
    const [form] = Form.useForm<PathogenFormData>();
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>();
    const [loading, setLoading] = useState(true);
    const [initialData, setInitialData] = useState<PathogenFormData | undefined>(undefined);

    useEffect(() => {
        if (id) {
            // Simulate fetching data
            const record = pathogens.find(p => p.id === id);
            if (record) {
                setInitialData({ ...record, pathogenName: record.name, pathogenType: record.type, biosafettyLevel: record.bsl });
                form.setFieldsValue({ ...record, pathogenName: record.name, pathogenType: record.type, biosafettyLevel: record.bsl });
            } else {
                message.error('未找到该病原体信息。');
                navigate('/pathogens');
            }
            setLoading(false);
        } else {
            message.error('缺少必要的ID，无法编辑病原体信息。');
            navigate('/pathogens');
        }
    }, [id, navigate, form]);

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('Updated Pathogen Data:', values);
            message.success('病原体信息更新成功!');
            navigate('/pathogens'); // Navigate back to list
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate('/pathogens'); // Navigate back to list
    };

    if (loading) {
        return <Spin size="large" style={{ display: 'block', margin: '50px auto' }} />;
    }

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <PathogenForm form={form} initialValues={initialData} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default EditPathogen;
---

File: pages\records\EditTestRecord.tsx
---
import { useState, useEffect } from 'react';
import { Form, Button, Space, message, Spin } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import TestRecordForm from '../../components/forms/TestRecordForm';
import type { TestRecordFormData } from '../../types/forms';
import { testRecords } from '../../data/testRecords'; // Mock data
import moment from 'moment';

const EditTestRecord = () => {
    const [form] = Form.useForm<TestRecordFormData>();
    const navigate = useNavigate();
    const { caseId, unknownCaseId, id } = useParams<{ caseId?: string; unknownCaseId?: string; id: string }>();
    const [loading, setLoading] = useState(true);
    const [initialData, setInitialData] = useState<TestRecordFormData | undefined>(undefined);

    const parentId = caseId || unknownCaseId;
    const parentType = caseId ? 'case' : 'unknownCase';

    useEffect(() => {
        if (id && parentId) {
            // Simulate fetching data
            const record = testRecords.find(tr => tr.id === id && (tr.caseId === caseId || tr.unknownCaseId === unknownCaseId));
            if (record) {
                setInitialData({
                    ...record,
                    sampleCollectionDate: moment(record.collectionTime), // Use 'collectionTime' for sampleCollectionDate
                    testDate: record.testStatus === '已确认' ? moment(record.collectionTime) : undefined, // Mock testDate if confirmed
                });
                form.setFieldsValue({
                    ...record,
                    sampleCollectionDate: moment(record.collectionTime),
                    testDate: record.testStatus === '已确认' ? moment(record.collectionTime) : undefined,
                });
            } else {
                message.error('未找到该检测记录。');
                navigate(caseId ? `/cases/${caseId}` : `/unknown-cases/${unknownCaseId}`);
            }
            setLoading(false);
        } else {
            message.error('缺少必要的ID，无法编辑检测记录。');
            navigate('/cases');
        }
    }, [id, caseId, unknownCaseId, navigate, form, parentId]);

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('Updated Test Record Data:', values);
            message.success('检测记录更新成功!');
            navigate(caseId ? `/cases/${caseId}` : `/unknown-cases/${unknownCaseId}`); // Navigate back to parent detail
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate(caseId ? `/cases/${caseId}` : `/unknown-cases/${unknownCaseId}`); // Navigate back to parent detail
    };

    if (loading) {
        return <Spin size="large" style={{ display: 'block', margin: '50px auto' }} />;
    }

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <TestRecordForm form={form} initialValues={initialData} parentType={parentType} parentId={parentId!} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default EditTestRecord;
---

File: pages\records\EditTrackingRecord.tsx
---
import { useState, useEffect } from 'react';
import { Form, Button, Space, message, Spin } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import TrackingRecordForm from '../../components/forms/TrackingRecordForm';
import type { TrackingRecordFormData } from '../../types/forms';
import { trackingRecords } from '../../data/trackingRecords'; // Mock data
import moment from 'moment';

const EditTrackingRecord = () => {
    const [form] = Form.useForm<TrackingRecordFormData>();
    const navigate = useNavigate();
    const { caseId, id } = useParams<{ caseId: string; id: string }>();
    const [loading, setLoading] = useState(true);
    const [initialData, setInitialData] = useState<TrackingRecordFormData | undefined>(undefined);

    useEffect(() => {
        if (id && caseId) {
            // Simulate fetching data
            const record = trackingRecords.find(tr => tr.id === id && tr.caseId === caseId);
            if (record) {
                setInitialData({
                    ...record,
                    trackingDate: moment(record.date), // Use 'date' for trackingDate
                    startDate: moment(record.startDate),
                    endDate: moment(record.endDate),
                    regionId: 'region1', // Mock regionId, actual data doesn't have it
                    exposureDetails: record.description, // Use description for exposureDetails
                });
                form.setFieldsValue({
                    ...record,
                    trackingDate: moment(record.date),
                    startDate: moment(record.startDate),
                    endDate: moment(record.endDate),
                    regionId: 'region1',
                    exposureDetails: record.description,
                });
            } else {
                message.error('未找到该追踪记录。');
                navigate(`/cases/${caseId}`);
            }
            setLoading(false);
        } else {
            message.error('缺少必要的ID，无法编辑追踪记录。');
            navigate('/cases');
        }
    }, [id, caseId, navigate, form]);

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('Updated Tracking Record Data:', values);
            message.success('追踪记录更新成功!');
            navigate(`/cases/${caseId}`); // Navigate back to case detail
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate(`/cases/${caseId}`); // Navigate back to case detail
    };

    if (loading) {
        return <Spin size="large" style={{ display: 'block', margin: '50px auto' }} />;
    }

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <TrackingRecordForm form={form} initialValues={initialData} caseId={caseId!} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default EditTrackingRecord;
---

File: pages\records\EditTreatment.tsx
---
import { useState, useEffect } from 'react';
import { Form, Button, Space, message, Spin } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import TreatmentForm from '../../components/forms/TreatmentForm';
import type { TreatmentFormData } from '../../types/forms';
import { treatments } from '../../data/treatments'; // Mock data
import moment from 'moment';

const EditTreatment = () => {
    const [form] = Form.useForm<TreatmentFormData>();
    const navigate = useNavigate();
    const { caseId, id } = useParams<{ caseId: string; id: string }>();
    const [loading, setLoading] = useState(true);
    const [initialData, setInitialData] = useState<TreatmentFormData | undefined>(undefined);

    useEffect(() => {
        if (id && caseId) {
            // Simulate fetching data
            const record = treatments.find(t => t.id === id && t.caseId === caseId);
            if (record) {
                setInitialData({
                    ...record,
                    treatmentDate: moment(record.date), // Use 'date' for treatmentDate
                    dischargeDate: record.dischargeDate ? moment(record.dischargeDate) : undefined,
                });
                form.setFieldsValue({
                    ...record,
                    treatmentDate: moment(record.date),
                    dischargeDate: record.dischargeDate ? moment(record.dischargeDate) : undefined,
                });
            } else {
                message.error('未找到该治疗记录。');
                navigate(`/cases/${caseId}`);
            }
            setLoading(false);
        } else {
            message.error('缺少必要的ID，无法编辑治疗记录。');
            navigate('/cases');
        }
    }, [id, caseId, navigate, form]);

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('Updated Treatment Data:', values);
            message.success('治疗记录更新成功!');
            navigate(`/cases/${caseId}`); // Navigate back to case detail
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate(`/cases/${caseId}`); // Navigate back to case detail
    };

    if (loading) {
        return <Spin size="large" style={{ display: 'block', margin: '50px auto' }} />;
    }

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <TreatmentForm form={form} initialValues={initialData} caseId={caseId!} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default EditTreatment;
---

File: pages\records\EditUnknownCase.tsx
---
import { useState, useEffect } from 'react';
import { Form, Button, Space, message, Spin } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import UnknownCaseForm from '../../components/forms/UnknownCaseForm';
import type { UnknownCaseFormData } from '../../types/forms';
import { unknownCases } from '../../data/unknownCases'; // Mock data
import moment from 'moment';

const EditUnknownCase = () => {
    const [form] = Form.useForm<UnknownCaseFormData>();
    const navigate = useNavigate();
    const { id } = useParams<{ id: string }>();
    const [loading, setLoading] = useState(true);
    const [initialData, setInitialData] = useState<UnknownCaseFormData | undefined>(undefined);

    useEffect(() => {
        if (id) {
            // Simulate fetching data
            const record = unknownCases.find(uc => uc.id === id);
            if (record) {
                setInitialData({
                    ...record,
                    address: '北京市朝阳区XX街道XX小区XX号楼XX单元', // Mock address for full form
                    reportOrgId: '北京市朝阳区疾控中心', // Mock
                    reportUserId: '李医生', // Mock
                    idCardNo: '110101197901011234', // Mock
                    phone: '13812345678', // Mock
                    clinicalSymptoms: record.symptoms, // Use symptoms for clinicalSymptoms
                    symptomOnsetDate: moment(record.reportDate).subtract(5, 'days'), // Mock symptom onset
                    reportDate: moment(record.reportDate),
                    urgencyLevel: record.urgency,
                    // Add other fields as needed for the form
                });
                form.setFieldsValue({
                    ...record,
                    address: '北京市朝阳区XX街道XX小区XX号楼XX单元',
                    reportOrgId: '北京市朝阳区疾控中心',
                    reportUserId: '李医生',
                    idCardNo: '110101197901011234',
                    phone: '13812345678',
                    clinicalSymptoms: record.symptoms,
                    symptomOnsetDate: moment(record.reportDate).subtract(5, 'days'),
                    reportDate: moment(record.reportDate),
                    urgencyLevel: record.urgency,
                });
            } else {
                message.error('未找到该不明原因病例。');
                navigate('/unknown-cases');
            }
            setLoading(false);
        } else {
            message.error('缺少必要的ID，无法编辑不明原因病例。');
            navigate('/unknown-cases');
        }
    }, [id, navigate, form]);

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('Updated Unknown Case Data:', values);
            message.success('不明原因病例更新成功!');
            navigate(`/unknown-cases/${id}`); // Navigate back to detail
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate(`/unknown-cases/${id}`); // Navigate back to detail
    };

    if (loading) {
        return <Spin size="large" style={{ display: 'block', margin: '50px auto' }} />;
    }

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <UnknownCaseForm form={form} initialValues={initialData} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default EditUnknownCase;
---

File: pages\records\NewDiseaseCode.tsx
---
import { useState } from 'react';
import { Form, Button, Space, message } from 'antd';
import { useNavigate } from 'react-router-dom';
import DiseaseCodeForm from '../../components/forms/DiseaseCodeForm';
import type { DiseaseCodeFormData } from '../../types/forms';

const NewDiseaseCode = () => {
    const [form] = Form.useForm<DiseaseCodeFormData>();
    const navigate = useNavigate();

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('New Disease Code Data:', values);
            message.success('疾病编码创建成功!');
            navigate('/disease-codes'); // Navigate back to list
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate('/disease-codes'); // Navigate back to list
    };

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <DiseaseCodeForm form={form} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default NewDiseaseCode;
---

File: pages\records\NewFollowUp.tsx
---
import { useState } from 'react';
import { Form, Button, Space, message } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import FollowUpForm from '../../components/forms/FollowUpForm';
import type { FollowUpFormData } from '../../types/forms';
import moment from 'moment';

const NewFollowUp = () => {
    const [form] = Form.useForm<FollowUpFormData>();
    const navigate = useNavigate();
    const { caseId, unknownCaseId } = useParams<{ caseId?: string; unknownCaseId?: string }>();

    const parentId = caseId || unknownCaseId;
    const parentType = caseId ? 'case' : 'unknownCase';

    if (!parentId) {
        message.error('缺少关联病例ID，无法新增随访记录。');
        navigate('/cases'); // Redirect to a safe page
        return null;
    }

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('New Follow-Up Data:', values);
            message.success('随访记录创建成功!');
            navigate(`/cases/${caseId}`); // Navigate back to case detail
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate(`/cases/${caseId}`); // Navigate back to case detail
    };

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <FollowUpForm form={form} parentType={parentType} parentId={parentId} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default NewFollowUp;
---

File: pages\records\NewPathogen.tsx
---
import { useState } from 'react';
import { Form, Button, Space, message } from 'antd';
import { useNavigate } from 'react-router-dom';
import PathogenForm from '../../components/forms/PathogenForm';
import type { PathogenFormData } from '../../types/forms';

const NewPathogen = () => {
    const [form] = Form.useForm<PathogenFormData>();
    const navigate = useNavigate();

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('New Pathogen Data:', values);
            message.success('病原体信息创建成功!');
            navigate('/pathogens'); // Navigate back to list
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate('/pathogens'); // Navigate back to list
    };

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <PathogenForm form={form} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default NewPathogen;
---

File: pages\records\NewTestRecord.tsx
---
import { useState } from 'react';
import { Form, Button, Space, message } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import TestRecordForm from '../../components/forms/TestRecordForm';
import type { TestRecordFormData } from '../../types/forms';

const NewTestRecord = () => {
    const [form] = Form.useForm<TestRecordFormData>();
    const navigate = useNavigate();
    const { caseId, unknownCaseId } = useParams<{ caseId?: string; unknownCaseId?: string }>();

    const parentId = caseId || unknownCaseId;
    const parentType = caseId ? 'case' : 'unknownCase';

    if (!parentId) {
        message.error('缺少关联病例ID，无法新增检测记录。');
        navigate('/cases'); // Redirect to a safe page
        return null;
    }

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('New Test Record Data:', values);
            message.success('检测记录创建成功!');
            navigate(caseId ? `/cases/${caseId}` : `/unknown-cases/${unknownCaseId}`); // Navigate back to parent detail
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate(caseId ? `/cases/${caseId}` : `/unknown-cases/${unknownCaseId}`); // Navigate back to parent detail
    };

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <TestRecordForm form={form} parentType={parentType} parentId={parentId} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default NewTestRecord;
---

File: pages\records\NewTrackingRecord.tsx
---
import { useState } from 'react';
import { Form, Button, Space, message } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import TrackingRecordForm from '../../components/forms/TrackingRecordForm';
import type { TrackingRecordFormData } from '../../types/forms';

const NewTrackingRecord = () => {
    const [form] = Form.useForm<TrackingRecordFormData>();
    const navigate = useNavigate();
    const { caseId } = useParams<{ caseId: string }>();

    if (!caseId) {
        message.error('缺少关联个案ID，无法新增追踪记录。');
        navigate('/cases'); // Redirect to a safe page
        return null;
    }

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('New Tracking Record Data:', values);
            message.success('追踪记录创建成功!');
            navigate(`/cases/${caseId}`); // Navigate back to case detail
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate(`/cases/${caseId}`); // Navigate back to case detail
    };

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <TrackingRecordForm form={form} caseId={caseId} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default NewTrackingRecord;
---

File: pages\records\NewTreatment.tsx
---
import { useState } from 'react';
import { Form, Button, Space, message } from 'antd';
import { useParams, useNavigate } from 'react-router-dom';
import TreatmentForm from '../../components/forms/TreatmentForm';
import type { TreatmentFormData } from '../../types/forms';

const NewTreatment = () => {
    const [form] = Form.useForm<TreatmentFormData>();
    const navigate = useNavigate();
    const { caseId } = useParams<{ caseId: string }>();

    if (!caseId) {
        message.error('缺少关联个案ID，无法新增治疗记录。');
        navigate('/cases'); // Redirect to a safe page
        return null;
    }

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('New Treatment Data:', values);
            message.success('治疗记录创建成功!');
            navigate(`/cases/${caseId}`); // Navigate back to case detail
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate(`/cases/${caseId}`); // Navigate back to case detail
    };

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <TreatmentForm form={form} caseId={caseId} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default NewTreatment;
---

File: pages\records\NewUnknownCase.tsx
---
import { useState } from 'react';
import { Form, Button, Space, message } from 'antd';
import { useNavigate } from 'react-router-dom';
import UnknownCaseForm from '../../components/forms/UnknownCaseForm';
import type { UnknownCaseFormData } from '../../types/forms';
import moment from 'moment';

const NewUnknownCase = () => {
    const [form] = Form.useForm<UnknownCaseFormData>();
    const navigate = useNavigate();

    const handleSubmit = async () => {
        try {
            const values = await form.validateFields();
            // In a real app, send values to API
            console.log('New Unknown Case Data:', values);
            message.success('不明原因病例创建成功!');
            navigate('/unknown-cases'); // Navigate back to list
        } catch (errorInfo) {
            console.log('Failed:', errorInfo);
            message.error('请检查表单填写项。');
        }
    };

    const handleCancel = () => {
        navigate('/unknown-cases'); // Navigate back to list
    };

    return (
        <Space direction="vertical" size="large" style={{ width: '100%' }}>
            <UnknownCaseForm form={form} />
            <div style={{ textAlign: 'right', marginTop: 24 }}>
                <Space>
                    <Button onClick={handleCancel}>取消</Button>
                    <Button type="primary" onClick={handleSubmit}>保存</Button>
                </Space>
            </div>
        </Space>
    );
};

export default NewUnknownCase;
---

File: router\index.tsx
---
import { createBrowserRouter } from 'react-router-dom';
import GlobalLayout from '../layouts/GlobalLayout';
import Dashboard from '../pages/Dashboard';
import CaseList from '../pages/CaseList';
import CaseDetail from '../pages/CaseDetail';
import UnknownCaseList from '../pages/UnknownCaseList';
import UnknownCaseDetail from '../pages/UnknownCaseDetail';
import AlertList from '../pages/AlertList';
import Statistics from '../pages/Statistics';
import DiseaseCodeList from '../pages/DiseaseCodeList';
import NewCase from '../pages/NewCase'; // Specific New Case Multi-step form
import PathogenList from '../pages/PathogenList';
import AlertDetail from '../pages/AlertDetail'; // Specific Alert Detail

// Import new record pages
import NewFollowUp from '../pages/records/NewFollowUp';
import EditFollowUp from '../pages/records/EditFollowUp';
import NewTreatment from '../pages/records/NewTreatment';
import EditTreatment from '../pages/records/EditTreatment';
import NewTestRecord from '../pages/records/NewTestRecord';
import EditTestRecord from '../pages/records/EditTestRecord';
import NewTrackingRecord from '../pages/records/NewTrackingRecord';
import EditTrackingRecord from '../pages/records/EditTrackingRecord';
import NewDiseaseCode from '../pages/records/NewDiseaseCode';
import EditDiseaseCode from '../pages/records/EditDiseaseCode';
import NewPathogen from '../pages/records/NewPathogen';
import EditPathogen from '../pages/records/EditPathogen';
import NewUnknownCase from '../pages/records/NewUnknownCase';
import EditUnknownCase from '../pages/records/EditUnknownCase';
import EditCase from '../pages/records/EditCase'; // Specific Edit Case Multi-step form


export const router = createBrowserRouter([
    {
        path: '/',
        element: <GlobalLayout />,
        children: [
            {
                index: true,
                element: <Dashboard />,
                handle: {
                    crumb: () => "工作台",
                },
            },
            // Case Management
            {
                path: 'cases',
                element: <CaseList />,
                handle: {
                    crumb: () => "个案列表",
                },
            },
            {
                path: 'cases/new',
                element: <NewCase />, // Specific form for new cases
                handle: {
                    crumb: () => "新增个案",
                },
            },
            {
                path: 'cases/:id',
                element: <CaseDetail />,
                handle: {
                    crumb: () => "个案详情",
                },
            },
            {
                path: 'cases/:id/edit',
                element: <EditCase />, // Specific edit page for a case
                handle: {
                    crumb: () => "编辑个案",
                },
            },
            // Sub-records of cases
            {
                path: 'cases/:caseId/follow-ups/new',
                element: <NewFollowUp />,
                handle: {
                    crumb: () => "新增随访记录",
                },
            },
            {
                path: 'cases/:caseId/follow-ups/:id/edit',
                element: <EditFollowUp />,
                handle: {
                    crumb: () => "编辑随访记录",
                },
            },
            {
                path: 'cases/:caseId/treatments/new',
                element: <NewTreatment />,
                handle: {
                    crumb: () => "新增治疗记录",
                },
            },
            {
                path: 'cases/:caseId/treatments/:id/edit',
                element: <EditTreatment />,
                handle: {
                    crumb: () => "编辑治疗记录",
                },
            },
            {
                path: 'cases/:caseId/test-records/new',
                element: <NewTestRecord />,
                handle: {
                    crumb: () => "新增检测记录",
                },
            },
            {
                path: 'cases/:caseId/test-records/:id/edit',
                element: <EditTestRecord />,
                handle: {
                    crumb: () => "编辑检测记录",
                },
            },
            {
                path: 'cases/:caseId/tracking-records/new',
                element: <NewTrackingRecord />,
                handle: {
                    crumb: () => "新增追踪记录",
                },
            },
            {
                path: 'cases/:caseId/tracking-records/:id/edit',
                element: <EditTrackingRecord />,
                handle: {
                    crumb: () => "编辑追踪记录",
                },
            },

            // Unknown Cases
            {
                path: 'unknown-cases',
                element: <UnknownCaseList />,
                handle: {
                    crumb: () => "不明原因病例列表",
                },
            },
            {
                path: 'unknown-cases/new',
                element: <NewUnknownCase />, // Specific new page for unknown case
                handle: {
                    crumb: () => "新增不明原因病例",
                },
            },
            {
                path: 'unknown-cases/:id',
                element: <UnknownCaseDetail />,
                handle: {
                    crumb: () => "不明原因病例详情",
                },
            },
            {
                path: 'unknown-cases/:id/edit',
                element: <EditUnknownCase />, // Specific edit page for unknown case
                handle: {
                    crumb: () => "编辑不明原因病例",
                },
            },
            // Test Records for Unknown Cases
            {
                path: 'unknown-cases/:unknownCaseId/test-records/new',
                element: <NewTestRecord />,
                handle: {
                    crumb: () => "新增检测记录",
                },
            },
            {
                path: 'unknown-cases/:unknownCaseId/test-records/:id/edit',
                element: <EditTestRecord />,
                handle: {
                    crumb: () => "编辑检测记录",
                },
            },

            // Alert Management
            {
                path: 'alerts',
                element: <AlertList />,
                handle: {
                    crumb: () => "预警列表",
                },
            },
            {
                path: 'alerts/:id/detail',
                element: <AlertDetail />, // Specific detail page for alerts
                handle: {
                    crumb: () => "预警详情",
                },
            },

            // Statistics (no new/edit implied)
            {
                path: 'statistics',
                element: <Statistics />,
                handle: {
                    crumb: () => "疾病统计",
                },
            },

            // Master Data Management - Disease Codes
            {
                path: 'disease-codes',
                element: <DiseaseCodeList />,
                handle: {
                    crumb: () => "疾病编码管理",
                },
            },
            {
                path: 'disease-codes/new',
                element: <NewDiseaseCode />, // Specific new page for disease code
                handle: {
                    crumb: () => "新增疾病编码",
                },
            },
            {
                path: 'disease-codes/:id/edit',
                element: <EditDiseaseCode />, // Specific edit page for disease code
                handle: {
                    crumb: () => "编辑疾病编码",
                },
            },

            // Master Data Management - Pathogens
            {
                path: 'pathogens',
                element: <PathogenList />,
                handle: {
                    crumb: () => "病原微生物管理",
                },
            },
            {
                path: 'pathogens/new',
                element: <NewPathogen />, // Specific new page for pathogen
                handle: {
                    crumb: () => "新增病原体",
                },
            },
            {
                path: 'pathogens/:id/edit',
                element: <EditPathogen />, // Specific edit page for pathogen
                handle: {
                    crumb: () => "编辑病原体",
                },
            },
        ],
    },
]);
---

File: types\forms.ts
---
import moment from 'moment';

// PF-5.2.4 Follow-up Form Data
export interface FollowUpFormData {
    caseId?: string; // Hidden, auto-filled from URL
    unknownCaseId?: string; // Hidden, auto-filled from URL
    followUpDate: moment.Moment;
    followUpMethod: '电话随访' | '现场随访' | '线上随访';
    followUpUserId?: string; // Auto-filled current user
    healthStatus: '好转' | '稳定' | '异常' | '恶化';
    temperature?: number; // 35.0-42.0
    symptoms?: string; // 0-500 chars
    treatmentCompliance: '良好' | '一般' | '差';
    nextFollowUpDate?: moment.Moment;
    remarks?: string; // 0-500 chars
}

// PF-5.2.5 Treatment Form Data
export interface TreatmentFormData {
    caseId?: string; // Hidden, auto-filled from URL
    treatmentDate: moment.Moment;
    treatmentType: '门诊' | '住院' | '居家隔离';
    hospitalName: string; // 2-200 chars
    departmentName?: string; // 2-100 chars
    doctorName?: string; // 2-50 chars
    diagnosis: string; // 10-500 chars
    treatmentPlan: string; // 10-1000 chars
    medications?: string; // 0-1000 chars
    treatmentOutcome?: '治愈' | '好转' | '无效' | '死亡' | '转院';
    dischargeDate?: moment.Moment; // Only for '住院', not earlier than treatmentDate
    createdBy?: string; // Auto-filled
}

// PF-5.2.6 Test Record Form Data
export interface TestRecordFormData {
    caseId?: string; // Hidden, auto-filled from URL
    unknownCaseId?: string; // Hidden, auto-filled from URL
    testNo?: string; // System auto-generated
    sampleCollectionDate: moment.Moment;
    sampleType: '咽拭子' | '血液' | '粪便' | '尿液' | '其他';
    testType: '核酸检测' | '抗体检测' | '培养' | '影像学' | '其他';
    testOrgName: string; // 2-200 chars
    testDate?: moment.Moment; // Not earlier than sampleCollectionDate
    testResult?: '阳性' | '阴性' | '待定' | '不确定';
    resultDetails?: string; // 0-1000 chars
    pathogenDetected?: string; // 0-200 chars, suggested for positive results
    testStatus: '待确认' | '已确认';
    labReportFile?: any; // File upload type
    createdBy?: string; // Auto-filled
}

// PF-5.2.7 Tracking Record Form Data
export interface TrackingRecordFormData {
    caseId?: string; // Hidden, auto-filled from URL
    trackingDate: moment.Moment;
    trackingType: '旅居史' | '接触史' | '物品暴露史' | '场所暴露史';
    startDate: moment.Moment;
    endDate: moment.Moment; // Not earlier than startDate
    regionId: string; // Cascader for 省/市/县
    locationDescription: string; // 10-500 chars
    longitude?: number;
    latitude?: number;
    contactPersons?: string; // 0-1000 chars, for '接触史'
    exposureDetails?: string; // 10-1000 chars
    riskAssessment: '高风险' | '中风险' | '低风险';
    createdBy?: string; // Auto-filled
}

// PF-5.6.1 Disease Code Form Data
export interface DiseaseCodeFormData {
    id?: string;
    diseaseCode: string; // Unique
    diseaseName: string; // 2-200 chars
    diseaseCategory: '甲类' | '乙类' | '丙类' | '其他';
    icdCode?: string; // ICD format
    description?: string; // 0-1000 chars
    riskLevel: '高' | '中' | '低';
    isQuarantine: boolean;
    isActive: boolean;
    relatedPathogens?: string[]; // Multi-select pathogen IDs
}

// PF-5.6.2 Pathogen Form Data
export interface PathogenFormData {
    id?: string;
    pathogenCode: string; // Unique
    pathogenName: string; // 2-200 chars
    pathogenType: '病毒' | '细菌' | '真菌' | '寄生虫' | '其他';
    scientificName?: string; // 0-200 chars
    associatedDiseases?: string; // 0-1000 chars
    description?: string; // 0-1000 chars
    biosafettyLevel: 'BSL-1' | 'BSL-2' | 'BSL-3' | 'BSL-4';
    isActive: boolean;
}

// PF-5.3.3 Unknown Case Form Data
export interface UnknownCaseFormData {
    id?: string;
    patientName: string; // 2-50 chars
    gender: '男' | '女' | '未知';
    idCardNo?: string; // ID card format, auto-verify duplicates
    age: number; // 0-150
    phone: string; // Phone number format
    address: string; // 5-500 chars (cascader + detail)
    reportOrgId?: string; // Auto-filled
    reportUserId?: string; // Auto-filled
    reportDate: moment.Moment; // Auto-filled
    symptomOnsetDate: moment.Moment; // Not later than today
    clinicalSymptoms: string; // 20-2000 chars
    suspectedPathogen?: string; // 0-200 chars
    initialAssessment?: string; // 0-500 chars
    urgencyLevel: '高' | '中' | '低';
}

// PF-5.2.3 New Case Form Data (simplified for editing existing case)
export interface CaseFormData {
    id?: string;
    diseaseId: string;
    patientName: string;
    gender: 'male' | 'female';
    idCard: string;
    dob?: moment.Moment;
    age: number;
    phone: string;
    address: string;
    reportUnit: string;
    reporter: string;
    reportDate: moment.Moment;
    symptomOnsetDate: moment.Moment;
    hasExposure: boolean;
    exposureHistory?: string;
    hasContact: boolean;
    contactDate?: moment.Moment;
    contactLocation?: string;
    contactHistory?: string;
    hasTravel: boolean;
    travelStartDate?: moment.Moment;
    travelEndDate?: moment.Moment;
    travelDestination?: string;
    travelHistory?: string;
    initialDiagnosis: string;
    confirmedDiagnosis?: string;
    diagnosisDate: moment.Moment;
    caseSource: 'active' | 'passive' | 'unknown';
    symptoms?: string[];
    otherSymptoms?: string;
}
---
--- Source Code END ---